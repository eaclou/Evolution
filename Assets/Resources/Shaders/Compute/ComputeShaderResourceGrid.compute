#pragma kernel CSGetResourceGridSamples
#pragma kernel CSSimResourceGrid
#pragma kernel CSAdvectResourceGrid
//#pragma kernel CSInitializeResourceGrid
#pragma kernel CSRemoveResourceGridAtLocations
#pragma kernel CSMeasureTotalResourceGrid2
#pragma kernel CSMeasureTotalResourceGrid4
#pragma kernel CSAddResourcesAtCoords

#pragma kernel CSInitRD
#pragma kernel CSSimRD
#pragma kernel CSAdvectRD


#include "Assets/Resources/Shaders/Inc/StructsCritterData.cginc"
#include "Assets/Resources/Shaders/Inc/StructsAlgaeParticles.cginc"

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;

Texture2D<float4> ObstaclesRead;

StructuredBuffer<AlgaeParticleData> algaeParticlesRead;

RWStructuredBuffer<float4> _ResourceGridSamplesCBuffer;
StructuredBuffer<float4> _ResourceGridEatAmountsCBuffer;
StructuredBuffer<float4> _AddResourceCBuffer;

Texture2D<float4> VelocityRead;

Texture2D<float4> _AltitudeTex;

Texture2D<float4> _SpiritBrushTex;

Texture2D<float4> _ResourceGridRead;
RWTexture2D<float4> _ResourceGridWrite;

Texture2D<float4> _ResourceSimTransferRead;

Texture2D<float4> rdRead;
RWTexture2D<float4> rdWrite;

RWStructuredBuffer<float4> outputValuesCBuffer;

Texture2D<float4> measureValuesTex;
RWTexture2D<float4> pooledResultTex;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;
SamplerState _PointClamp;
SamplerState _PointRepeat;

uniform float _AlgaeGridDiffusion;
uniform float _TextureResolution;
uniform float _DeltaTime;
uniform float _InvGridScale;
uniform float _MapSize;

uniform float _IsSpiritBrushDecomposersOn;
uniform float _IsSpiritBrushAlgaeOn;
uniform float _SpiritBrushPosNeg;
uniform float _SpiritBrushIntensity;

uniform float _CoordX;
uniform float _CoordY;

//uniform float _RD_FeedRate;
//uniform float _RD_KillRate;            
//uniform float _RD_Scale;
//uniform float _RD_Rate;

uniform float _AlgaeUpkeep; // = 0.001;
uniform	float _AlgaeMaxIntakeRate; // = 0.0025;
uniform float _AlgaeGrowthEfficiency; // = 1.0;
uniform float _DecomposerUpkeep; // = 0.001;
uniform float _DecomposerMaxIntakeRate; // = 0.0025;
uniform float _DecomposerEnergyGenerationEfficiency; // = 1.0;

uniform float _Time;

[numthreads(1,1,1)]
void CSGetResourceGridSamples (uint3 id : SV_DispatchThreadID)
{	
	CritterSimData critterSimData = critterSimDataCBuffer[id.x];

	float2 uv = critterSimData.worldPos.xy / _MapSize;
	float4 algaeGridAmount = _ResourceGridRead.SampleLevel(_PointClamp, uv, 0);

	// want gradient! -- pack into .yz channels :::
	// calculate gradient each step and store value

	_ResourceGridSamplesCBuffer[id.x] = algaeGridAmount;
}

[numthreads(32,32,1)]
void CSSimResourceGrid (uint3 id : SV_DispatchThreadID)
{	
	// Diffusion - food blurs and spreads out
	// Store Gradient of increasing food density
			
    float4 amountRight = _ResourceGridRead[int2(id.x + 1, id.y)];
    float4 amountLeft = _ResourceGridRead[int2(id.x - 1, id.y)];
    float4 amountUp = _ResourceGridRead[int2(id.x, id.y + 1)];
    float4 amountDown = _ResourceGridRead[int2(id.x, id.y - 1)];
    float4 amountCenter = _ResourceGridRead[id.xy];

	// Check vs obstacles??
	float xCoord = ((float)id.x + 0.5)  / 32;  // ** Bad hardcoded!!!!!
	float yCoord = ((float)id.y + 0.5)  / 32;
	float2 uvOrigin = float2(xCoord, yCoord);
	float ps = 1.0 / 32;
	
	half4 centerObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin, 0);

	half4 leftObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(-ps, 0), 0);
	half4 rightObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(ps, 0), 0);
	half4 topObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, ps), 0);
	half4 bottomObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, -ps), 0);	
		
	if(centerObstacle.b > 0.5) amountCenter = 0.0;
	if(leftObstacle.b > 0.5) amountLeft = amountCenter;
	if(rightObstacle.b > 0.5) amountRight = amountCenter;
	if(topObstacle.b > 0.5) amountUp = amountCenter;
	if(bottomObstacle.b > 0.5) amountDown = amountCenter;
		

    //float deltaX = amountRight.x - amountLeft.x;
    //float deltaY = amountUp.x - amountDown.x;

	//float2 grad = float2(0,0);
	//if(abs(deltaX) > 0.000001 || abs(deltaY) > 0.000001) {
	//	grad = normalize(float2(deltaX, deltaY));
	//}
    
	//float2 grad = normalize(float2(deltaX, deltaY));
	// Make sure this doesn't return null/undefined!!!!! ******  ***  (I didn't) ****
	
	float4 newAmount = lerp(amountCenter, (amountCenter + amountRight + amountLeft + amountUp + amountDown) / 5, _AlgaeGridDiffusion);

	_ResourceGridWrite[id.xy] = newAmount; //float4(newAmount, grad, 1.0);
}

[numthreads(32,32,1)]
void CSAdvectResourceGrid (uint3 id : SV_DispatchThreadID)
{

	float xCoord = ((float)id.x + 0.5) / 32.0;
	float yCoord = ((float)id.y + 0.5) / 32.0;
	float2 uvOrigin = float2(xCoord, yCoord);

	float isSolid = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin, 0).b;	
	float2 uvSample = uvOrigin - _DeltaTime * _InvGridScale * VelocityRead.SampleLevel(_LinearRepeat, uvOrigin, 0).xy;
	float4 newDensity = _ResourceGridRead.SampleLevel(_LinearRepeat, uvSample, 0);
	
	AlgaeParticleData particleData = algaeParticlesRead[(id.x * 32 + id.y + round(_Time * 75.4837)) % 1024];
	float2 particleCoords = particleData.worldPos / _MapSize;
	float dist = length(uvOrigin - particleCoords);
	float distMask = saturate(1.0 - dist * 7);
	
	newDensity.y += saturate(particleData.biomass * 6) / 46 * distMask - 0.0006;

	/*if(isSolid > 0.5) {
		_ResourceGridWrite[id.xy] = 0; //newDensity;

		return;
	}*/
			
	_ResourceGridWrite[id.xy] = saturate(newDensity);
}
/*
[numthreads(32,32,1)]
void CSInitializeResourceGrid (uint3 id : SV_DispatchThreadID)
{	
	// CHANNEL X = Nutrients
	// CHANNEL Y = Detritus
	// CHANNEL Z = Oxygen?
	_ResourceGridWrite[id.xy] = float4(saturate(sin((float2)id.xy * 3.57912)),0,0); // float4(saturate(sin((float2)id.xy / 2)) * 0.25, 0.11, 0.3);  
}
*/
[numthreads(1,1,1)]
void CSRemoveResourceGridAtLocations (uint3 id : SV_DispatchThreadID)
{	
	// takes a list of info:
	// --cell index x,y
	// --amount of food to remove / mouth stats
	// buffer of floats per Critter?

	uint xIndex = floor(critterSimDataCBuffer[id.x].worldPos.x / _MapSize * 32);  // 32 = hardcoded resolution ****
	uint yIndex = floor(critterSimDataCBuffer[id.x].worldPos.y / _MapSize * 32);

	uint2 cellIndex = uint2(xIndex, yIndex);

	float4 currentAmount = _ResourceGridRead[cellIndex];
	float amountToRemove = _ResourceGridEatAmountsCBuffer[id.x].x;

	currentAmount.x = max(0.0, currentAmount.x - amountToRemove);

	_ResourceGridWrite[cellIndex] = currentAmount;

	// WHY SO SLOW????
}

[numthreads(1,1,1)]
void CSMeasureTotalResourceGrid2 (uint3 id : SV_DispatchThreadID)
{	
	// for each output pixel, loop through original 2x2 pixels and sum them together

	float4 totalValue = float4(0,0,0,0);

	for(int x = 0; x < 2; x++) {
		for(int y = 0; y < 2; y++) {
			int xIndex = id.x * 2 + x;
			int yIndex = id.y * 2 + y;

			totalValue += measureValuesTex[int2(xIndex, yIndex)];
		}
	}

	float4 pixValue = totalValue; // float4(totalAlgae,9,1,1); // *** ?????

	pooledResultTex[id.xy] = pixValue;

	outputValuesCBuffer[0] = pixValue;
}

[numthreads(1,1,1)]
void CSMeasureTotalResourceGrid4 (uint3 id : SV_DispatchThreadID)
{	
	// for each output pixel, loop through original 2x2 pixels and sum them together

	float4 totalValue = float4(0,0,0,0);

	for(int x = 0; x < 4; x++) {
		for(int y = 0; y < 4; y++) {
			int xIndex = id.x * 4 + x;
			int yIndex = id.y * 4 + y;

			totalValue += measureValuesTex[int2(xIndex, yIndex)];
		}
	}

	float4 pixValue = totalValue; // float4(totalAlgae,9,1,1); // *** ?????

	pooledResultTex[id.xy] = pixValue;

	outputValuesCBuffer[0] = pixValue;
}

[numthreads(1,1,1)]
void CSAddResourcesAtCoords (uint3 id : SV_DispatchThreadID)
{	
	float4 data = _AddResourceCBuffer[id.x];
	
	int xIndex = floor(_CoordX * 32.0);  // *** hardcoded resolution!!!!
	int yIndex = floor(_CoordY * 32.0);
	int2 index = int2(xIndex, yIndex);

	float4 currentAlgaeGrid = _ResourceGridRead[index];

	currentAlgaeGrid += data;

	_ResourceGridWrite[index] = saturate(currentAlgaeGrid);
}


[numthreads(32,32,1)]
void CSInitRD (uint3 id : SV_DispatchThreadID)
{	
	// CHANNEL X = none
	// CHANNEL Y = Decomposers
	// CHANNEL Z = AlgaeGrid
	float2 uv = ((float2)id.xy + 0.5) / _TextureResolution;
	//rdWrite[id.xy] = float4(0, 0, 0, 1);   // Start blank
	
	// CHANNEL X = Nutrients
	// CHANNEL Y = Detritus
	// CHANNEL Z = Oxygen?
	float u = sin(uv.x * -97346 * cos(uv.y * 32143.72)) * 0.5 + 0.5;
	float v = sin(uv.y * -34983116 * cos(uv.x * 32143.72)) * 0.5 + 0.5;
	u *= 0.01;
	v *= 0.01;
	float4 resources = float4(u, v, 0,0); 
	
	_ResourceGridWrite[id.xy] = resources; 

}

[numthreads(32,32,1)]
void CSSimRD (uint3 id : SV_DispatchThreadID)
{

	// X = nutrients
	// Y = detritus
	// Z = decomposers
	// W = algae
	
	float s = 1 / _TextureResolution;
	float2 uv = float2((float2)id.xy + 0.5) / _TextureResolution;

	
	float4 resourceGridRight = _ResourceGridRead[int2(id.x + 1, id.y)];
	float4 resourceGridLeft = _ResourceGridRead[int2(id.x - 1, id.y)];
    float4 resourceGridUp = _ResourceGridRead[int2(id.x, id.y + 1)];
    float4 resourceGridDown = _ResourceGridRead[int2(id.x, id.y - 1)];
    float4 resourceGridCenter = _ResourceGridRead[id.xy];
	float4 diffusionAmounts = float4(0.1,0.025,0.005,0);
	
	float4 resourceGridRead;
	resourceGridRead.x = lerp(resourceGridCenter.x, (resourceGridCenter.x + resourceGridRight.x + resourceGridLeft.x + resourceGridUp.x + resourceGridDown.x) / 5, diffusionAmounts.x);
	resourceGridRead.y = lerp(resourceGridCenter.y, (resourceGridCenter.y + resourceGridRight.y + resourceGridLeft.y + resourceGridUp.y + resourceGridDown.y) / 5, diffusionAmounts.y);
	resourceGridRead.z = lerp(resourceGridCenter.z, (resourceGridCenter.z + resourceGridRight.z + resourceGridLeft.z + resourceGridUp.z + resourceGridDown.z) / 5, diffusionAmounts.z);
	resourceGridRead.w = lerp(resourceGridCenter.w, (resourceGridCenter.w + resourceGridRight.w + resourceGridLeft.w + resourceGridUp.w + resourceGridDown.w) / 5, diffusionAmounts.w);

	

	// =============================== NUTRIENTS ================================
	float nutrientsMass = resourceGridRead.x;
	
	
	// =============================== DETRITUS ================================
	float detritusMass = resourceGridRead.y;

	
	// =============================== ALGAE ================================
	float algaeMass = resourceGridRead.w;

	float availableNutrientsMass = min(_AlgaeMaxIntakeRate * algaeMass, nutrientsMass);

	float energyCost = algaeMass * _AlgaeUpkeep;
	float energyCreated = availableNutrientsMass * _AlgaeGrowthEfficiency;
	float nutrientsUsed = availableNutrientsMass;
	
	float netEnergy = energyCreated - energyCost;

	float algaeDecayMass = saturate(netEnergy * -1.0);
	float detritusCreated = algaeDecayMass;

	float algaeGrowthMass = netEnergy;
	
	// =============================== DECOMPOSERS ================================
	float decomposersMass = resourceGridRead.z;

	float availableDetritusMass = min(_DecomposerMaxIntakeRate * decomposersMass, detritusMass);

	float decomposerEnergyCost = decomposersMass * _DecomposerUpkeep;
	float decomposerEnergyCreated = availableDetritusMass * _DecomposerEnergyGenerationEfficiency;
	float detritusUsed = availableDetritusMass;
	
	float nutrientsCreated = decomposerEnergyCreated;
	float decomposerNetEnergy = decomposerEnergyCreated - decomposerEnergyCost;
	float decomposerDecayMass = saturate(decomposerNetEnergy * -1.0);
	float decomposerGrowthMass = decomposerNetEnergy;
	//detritusCreated += decomposerDecayMass;
	
	
	
	// ======================= WRITE & RETURN! ====================================
	resourceGridRead.w += algaeGrowthMass;  // saturated later to prevent negative
	//resourceGridRead.w -= algaeDecayMass;//
	resourceGridRead.z += decomposerGrowthMass;  // saturated later to prevent negative
	resourceGridRead.z += decomposerDecayMass * 0.15; // ** shouldn't be necessary???
	//resourceGridRead.x += algaeGrowthMass; 
	resourceGridRead.x -= nutrientsUsed; 
	resourceGridRead.x += nutrientsCreated * 1.42;
	resourceGridRead.y -= detritusUsed;
	resourceGridRead.y += detritusCreated * 1.42;  // // *** hacky empirical fix for balancing conservation of energy/mass
	
	// X = nutrients
	// Y = detritus
	// Z = decomposers
	// W = algae
	

	_ResourceGridWrite[id.xy] = saturate(resourceGridRead);
	//rdWrite[id.xy] = saturate(resourceGridRead);


	

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//========== RESOURCE GRID OLD:  (Features Diffusion code)
	/*

	void CSSimResourceGrid (uint3 id : SV_DispatchThreadID)
{	
	// Diffusion - food blurs and spreads out
	// Store Gradient of increasing food density
			
    float4 amountRight = _ResourceGridRead[int2(id.x + 1, id.y)];
    float4 amountLeft = _ResourceGridRead[int2(id.x - 1, id.y)];
    float4 amountUp = _ResourceGridRead[int2(id.x, id.y + 1)];
    float4 amountDown = _ResourceGridRead[int2(id.x, id.y - 1)];
    float4 amountCenter = _ResourceGridRead[id.xy];

	// Check vs obstacles??
	float xCoord = ((float)id.x + 0.5)  / 32;  // ** Bad hardcoded!!!!!
	float yCoord = ((float)id.y + 0.5)  / 32;
	float2 uvOrigin = float2(xCoord, yCoord);
	float ps = 1.0 / 32;
	
	half4 centerObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin, 0);

	half4 leftObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(-ps, 0), 0);
	half4 rightObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(ps, 0), 0);
	half4 topObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, ps), 0);
	half4 bottomObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, -ps), 0);	
		
	if(centerObstacle.b > 0.5) amountCenter = 0.0;
	if(leftObstacle.b > 0.5) amountLeft = amountCenter;
	if(rightObstacle.b > 0.5) amountRight = amountCenter;
	if(topObstacle.b > 0.5) amountUp = amountCenter;
	if(bottomObstacle.b > 0.5) amountDown = amountCenter;
	
	float4 newAmount = lerp(amountCenter, (amountCenter + amountRight + amountLeft + amountUp + amountDown) / 5, _AlgaeGridDiffusion);

	_ResourceGridWrite[id.xy] = newAmount; //float4(newAmount, grad, 1.0);
}


	*/
}

// DIFFUSION & ADVECTION NEED TO BE IN SEPARATE PASSES:

[numthreads(32,32,1)]
void CSAdvectRD (uint3 id : SV_DispatchThreadID)
{

	float xCoord = ((float)id.x + 0.5)  / _TextureResolution;
	float yCoord = ((float)id.y + 0.5)  / _TextureResolution;
	float2 uvOrigin = float2(xCoord, yCoord);
		
	float2 uvSample = uvOrigin - _DeltaTime * _InvGridScale * VelocityRead.SampleLevel(_LinearClamp, uvOrigin, 0).xy * 1;
	float2 uvSlow = uvOrigin - _DeltaTime * _InvGridScale * VelocityRead.SampleLevel(_LinearClamp, uvOrigin, 0).xy * 0.17182571125;
	
	float4 resourceGridReadStatic = _ResourceGridRead.SampleLevel(_LinearClamp, uvOrigin, 0);	
	float4 resourceGridReadSlow = _ResourceGridRead.SampleLevel(_LinearClamp, uvSlow, 0);	
	float4 resourceGridRead = _ResourceGridRead.SampleLevel(_LinearClamp, uvSample, 0);	
	resourceGridRead.y = resourceGridReadStatic.y;  //  Detritus doesn't move in water?? experiemntal....

	// Handle SpiritBrush Here????
	float4 spiritBrushSample = _SpiritBrushTex.SampleLevel(_LinearClamp, uvOrigin, 0);
	float4 externalResource = _ResourceSimTransferRead.SampleLevel(_PointClamp, uvOrigin, 0);
	
	float brushMagnitude = _SpiritBrushIntensity;
	float deltaBrushDecomposer = _IsSpiritBrushDecomposersOn * _SpiritBrushPosNeg * spiritBrushSample.x;
	float deltaBrushAlgae = _IsSpiritBrushAlgaeOn * _SpiritBrushPosNeg * spiritBrushSample.x;

	resourceGridRead.x = saturate(resourceGridRead.x - externalResource.x * 10);  // plantParticles Nutrient Usage
	resourceGridRead.y += externalResource.z * 10; // Waste += Zooplankton Poop
	resourceGridRead.w -= externalResource.y * 100; // Algae -= Algae Eaten
	resourceGridRead.z = saturate(resourceGridReadSlow.z + deltaBrushDecomposer * brushMagnitude);  // *** TEMPORARY!!! **** Decomposers removed from brushing
	resourceGridRead.w = saturate(resourceGridRead.w + deltaBrushAlgae * brushMagnitude);
	
			
	_ResourceGridWrite[id.xy] = resourceGridRead;
	
}


//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//   OLD! REACTION DIFFUSION CoDE
/*
float s = 1 / _TextureResolution;
	

	float2 uv = float2((float2)id.xy + 0.5) / _TextureResolution;

	// Neighbour cells
	float4 resourceGridRead = _ResourceGridRead.SampleLevel(_LinearClamp, uv, 0);

	float4 bl = rdRead.SampleLevel(_PointClamp, uv + float2(-s, +s), 0);	// F[x-1, y+1]: Bottom Left
	float4 cl = rdRead.SampleLevel(_PointClamp, uv + float2(-s,  0), 0);	// F[x-1, y  ]: Centre Left
	float4 tl = rdRead.SampleLevel(_PointClamp, uv + float2(-s, -s), 0); // F[x-1, y-1]: Top Left
	float4 tc = rdRead.SampleLevel(_PointClamp, uv + float2( 0, -s), 0);	// F[x,   y-1]: Top Centre
	float4 tr = rdRead.SampleLevel(_PointClamp, uv + float2(+s, -s), 0);	// F[x,   y-1]: Top Right
	float4 cc = rdRead.SampleLevel(_PointClamp, uv + float2( 0,  0), 0);	// F[x,   y  ]: Centre Centre
	float4 br = rdRead.SampleLevel(_PointClamp, uv + float2(+s, +s), 0);	// F[x+1, y+1]: Bottom Right
	float4 bc = rdRead.SampleLevel(_PointClamp, uv + float2( 0, +s), 0);	// F[x,   y+1]: Bottom Centre
	float4 cr = rdRead.SampleLevel(_PointClamp, uv + float2(+s,  0), 0);	// F[x+1, y  ]: Centre Right
		
	float4 altitudeSample = _AltitudeTex.SampleLevel(_PointClamp, uv + float2( 0,  0), 0);
	float altitude01 = altitudeSample.x;
	float altitudeMask = saturate((altitude01 - 0.55) * 10);


	float minFeedRate = 0.05;
	float maxFeedRate = 0.06;
	float minKillRate = 0.058;
	float maxKillRate = 0.066;	
	float minScale = 0.1;
	float maxScale = 1.0;
	float minReactionRate = 0.01;
	float maxReactionRate = 0.7;
	float feedRate = lerp(minFeedRate, maxFeedRate, _RD_FeedRate); //       lerp(0.052, 0.058, cos(uv.y * 1.328 + _Time * 1.0413) * 0.5 + 0.5); //0.055;
	float killRate = lerp(minKillRate, maxKillRate, _RD_KillRate); //       lerp(0.060, 0.064, sin(uv.x * 3.528 - _Time * 0.2872) * 0.5 + 0.5); // 0.062;
	float scale = lerp(minScale, maxScale, _RD_Scale);
	float reactionRate = lerp(minReactionRate, maxReactionRate, _RD_Rate);
	float deltaTime = reactionRate;

	float diffusionRateA = 1 * scale;
	float diffusionRateB = 0.33 * scale;

	diffusionRateA *= altitudeMask * 0.25 + 0.75;
	diffusionRateB *= altitudeMask * 0.25 + 0.75;
		
	float coCenter = -1;
	float coAdjacent = 0.2;
	float coDiagonal = 0.05;

	float laplaceA = cc.x * coCenter +
						(cl.x + tc.x + cr.x + bc.x) * coAdjacent +
						(bl.x + tl.x + tr.x + br.x) * coDiagonal;
	float laplaceB = cc.y * coCenter +
						(cl.y + tc.y + cr.y + bc.y) * coAdjacent +
						(bl.y + tl.y + tr.y + br.y) * coDiagonal;
				
	float abb = cc.x * cc.y * cc.y;

	float valA = cc.x + (diffusionRateA * laplaceA - abb + feedRate * (1 - cc.x)) * deltaTime;
	float valB = cc.y + (diffusionRateB * laplaceB + abb - (killRate + feedRate) * cc.y) * deltaTime;

	
	valB -= altitudeMask;

	
	// ***** ALGAE TEST: CHANNEL Z primary
	// original value:
	float curAlgaeVal = cc.z + resourceGridRead.x * 0.001 - resourceGridRead.y * 0.001;
	
	
	float4 col = float4(saturate(valA), saturate(valB), saturate(curAlgaeVal), 0); 
	

	rdWrite[id.xy] = col;
	


*/
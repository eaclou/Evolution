// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel CSSinglePassCurveBrushData
#pragma kernel CSUpdateCurveBrushDataAgentIndex
#pragma kernel CSUpdateBodyStrokeDataAgentIndex
#pragma kernel CSUpdateEyeStrokeDataAgentIndex
#pragma kernel CSPinRootTrailStrokesData
#pragma kernel CSIterateTrailStrokesData
#pragma kernel CSAlignFrameBufferStrokes
#pragma kernel CSUpdateDynamicStemBuffers
#pragma kernel CSUpdateDynamicLeafBuffers
#pragma kernel CSUpdateDynamicFruitBuffers
#pragma kernel CSSimulateFruit
#pragma kernel CSSimulateCritterStrokes

#include "Assets/Resources/Shaders/Inc/CritterBodyAnimation.cginc"


struct CritterStrokeData {
	int parentIndex;  // what agent/object is this attached to?				
	float2 worldPos;
	float2 localPos;
	float2 localDir;
	float2 localScale;
	float strength;  // abstraction for pressure of brushstroke + amount of paint 
	int brushType;
};
struct CritterInitData {
	float2 boundingBoxSize;
	float spawnSizePercentage;
	float maxEnergy;
	float3 primaryHue;
	float3 secondaryHue;
	int bodyPatternX;  // what grid cell of texture sheet to use
	int bodyPatternY;  // what grid cell of texture sheet to use
};
struct CritterSimData {
	float2 worldPos;
	float2 velocity;
	float2 heading;
	float growthPercentage;
	float decayPercentage;
	float foodAmount;
	float energy;
	float health;
	float stamina;
	float biteAnimCycle;
	float moveAnimCycle;
	float turnAmount;
	float accel;
	float smoothedThrottle;
};

struct AgentSimData {
	float2 worldPos;
	float2 velocity;
	float2 heading;
	float2 size;
	float3 primaryHue;  // can eventually pull these static variables out of here to avoid per-frame updates on non-dynamic attributes
	float3 secondaryHue;
	float maturity;
	float decay;
	float eatingStatus;
	float foodAmount;
};

struct BodyStrokeData {
	int parentIndex;  // what agent/object is this attached to?				
	float2 localPos;
	float2 localDir;
	float2 localScale;
	float strength;  // abstraction for pressure of brushstroke + amount of paint 
	int brushTypeX;  // what texture/mask/brush pattern to use
	int brushTypeY;
};

struct AgentEyeStrokeData {
	int parentIndex;  // what agent/object is this attached to?				
	float2 localPos;
	float2 localDir;
	float2 localScale;
	float3 irisHue;
	float3 pupilHue;
	float strength;  // abstraction for pressure of brushstroke + amount of paint 
	int brushType;  // what texture/mask/brush pattern to use
};

struct CurveStrokeData {
    int parentIndex;
    float3 hue;
    float2 p0;
    float2 p1;
    float2 p2;
    float2 p3;
	float width;
    float restLength;
    float strength;
    int brushType;
};

struct TrailStrokeData {
    float2 worldPos;
};

struct FrameBufferStrokeData {
	float3 worldPos;
	float2 scale;
	float2 heading;
	int brushType;
};

struct FoodSimData {
	float2 worldPos;
	float2 velocity;
	float2 heading;
	float2 fullSize;
	float3 foodAmount;
	float growth;
	float decay;
	float health;
	int stemBrushType;
	int leafBrushType;
	int fruitBrushType;
	float3 stemHue;
	float3 leafHue;
	float3 fruitHue;
};
struct StemData {  // Only the main trunk for now!!! worry about other ones later!!! SIMPLIFY!!!
    int foodIndex;
    float2 localBaseCoords;  // main trunk is always (0, -1f) --> (0f, 1f), secondary stems need to start with x=0 (to be on main trunk)
    float2 localTipCoords;  // scaled with main Food scale
    float width; // thickness of branch
    float childGrowth; // for future use:  // 0-1, 1 means fully mature childFood attached to this, 0 means empty end  
    float attached;
};
struct LeafData { // fixed number, but some aren't used (zero scale??)
    int foodIndex;
    float2 worldPos;
    float2 localCoords;
    float2 localScale;
    float attached;  // if attached, sticks to parent food, else, floats in water
};
struct FruitData {
    int foodIndex;
    float2 worldPos;
    float2 localCoords;
    float2 localScale;
    float attached;  // if attached, sticks to parent food, else, floats in water
};

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;
StructuredBuffer<AgentSimData> agentSimDataCBuffer;
StructuredBuffer<FoodSimData> foodSimDataCBuffer;
StructuredBuffer<int> agentInitializeCBuffer;
StructuredBuffer<CurveStrokeData> agentCurveStrokesReadCBuffer; // use this for updating
RWStructuredBuffer<CurveStrokeData> agentCurveStrokesWriteCBuffer;
int _CurveStrokesUpdateAgentIndex;

RWStructuredBuffer<CritterStrokeData> critterStrokesWriteCBuffer;

StructuredBuffer<BodyStrokeData> agentBodyStrokesReadCBuffer; // use this for updating
RWStructuredBuffer<BodyStrokeData> agentBodyStrokesWriteCBuffer;
StructuredBuffer<AgentEyeStrokeData> agentEyeStrokesReadCBuffer; // use this for updating
RWStructuredBuffer<AgentEyeStrokeData> agentEyeStrokesWriteCBuffer;

StructuredBuffer<TrailStrokeData> agentTrailStrokesReadCBuffer;
RWStructuredBuffer<TrailStrokeData> agentTrailStrokesWriteCBuffer;

StructuredBuffer<StemData> foodStemDataUpdateCBuffer;
RWStructuredBuffer<StemData> foodStemDataWriteCBuffer;
StructuredBuffer<LeafData> foodLeafDataUpdateCBuffer;
RWStructuredBuffer<LeafData> foodLeafDataWriteCBuffer;
StructuredBuffer<FruitData> foodFruitDataUpdateCBuffer;
RWStructuredBuffer<FruitData> foodFruitDataWriteCBuffer;

Texture2D<float4> terrainHeightTex;
RWStructuredBuffer<FrameBufferStrokeData> terrainFrameBufferStrokesCBuffer;

Texture2D<float4> velocityRead;

SamplerState _LinearRepeat;

float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

float length_squared(float2 v, float2 w) {
	float2 r = w - v;
	float distSqr = (r.x * r.x + r.y * r.y);
	return distSqr;
}

float minimum_distance(float2 v, float2 w, float2 p) {
	// Return minimum distance between line segment vw and point p
	const float l2 = length_squared(v, w);  // i.e. |w-v|^2 -  avoid a sqrt
	if (l2 == 0.0) {
	return length(v - p);   // v == w case
	}
	// Consider the line extending the segment, parameterized as v + t (w - v).
	// We find projection of point p onto the line. 
	// It falls where t = [(p-v) . (w-v)] / |w-v|^2
	// We clamp t from [0,1] to handle points outside the segment vw.
	const float t = max(0, min(1, dot(p - v, w - v) / l2));
	const float2 projection = v + t * (w - v);  // Projection falls on the segment
	return distance(p, projection);
}

CurveStrokeData UpdateCurveStroke(CurveStrokeData inData, AgentSimData agentData) {
	CurveStrokeData curveData = inData;	

	float restDistance = curveData.restLength; // * agentData.maturity;

	float2 p0 = agentData.worldPos + agentData.heading * agentData.size.y * 0.0;
	
	float2 p1 = curveData.p1;
	float2 vec0to1 = p1 - p0; // after p0 has been moved, vector from old P1 to new P0	
	p1 = p0 + normalize(vec0to1) * restDistance;

	float2 p2 = curveData.p2;
	float2 vec1to2 = p2 - p1;
	p2 = p1 + normalize(vec1to2) * restDistance;

	float2 p3 = curveData.p3;
	float2 vec2to3 = p3 - p2;
	p3 = p2 + normalize(vec2to3) * restDistance;

	curveData.p0 = p0;
	curveData.p1 = p1;
	curveData.p2 = p2;
	curveData.p3 = p3;

	return curveData;
}

CurveStrokeData UpdateCurveStrokeDirectional(CurveStrokeData inData, AgentSimData agentData) {
	CurveStrokeData curveData = inData;	

	float lerpStrength = 0.75;
	float lerpDecay = 0.47;
	float restDistance = curveData.restLength * agentData.maturity * 1.0;
	
	float2 p0 = agentData.worldPos + (agentData.heading * agentData.size.y * 0.15); // pin root to head tip

	float2 targetPosP1 = p0 - agentData.heading * restDistance;
	float2 p1 = lerp(curveData.p1, targetPosP1, lerpStrength);

	lerpStrength *= lerpDecay;

	float2 vec2to1 = curveData.p2 - curveData.p1;
	float2 targetPosP2 = curveData.p1 - agentData.heading * restDistance;
	float2 p2 = lerp(curveData.p2, targetPosP2, lerpStrength);

	lerpStrength *= lerpDecay;

	float2 vec3to2 = curveData.p3 - curveData.p2;
	float2 targetPosP3 = curveData.p2 - agentData.heading * restDistance;
	float2 p3 = lerp(curveData.p3, targetPosP3, lerpStrength);

	curveData.p0 = p0;
	curveData.p1 = p1;
	curveData.p2 = p2;
	curveData.p3 = p3;

	return curveData;
}


[numthreads(1,1,1)]
void CSSinglePassCurveBrushData (uint3 id : SV_DispatchThreadID)
{
	CurveStrokeData curveData = agentCurveStrokesWriteCBuffer[id.x];
	AgentSimData agentData = agentSimDataCBuffer[curveData.parentIndex];
	
	agentCurveStrokesWriteCBuffer[id.x] = UpdateCurveStrokeDirectional(curveData, agentData);	
}

[numthreads(1,1,1)]
void CSUpdateCurveBrushDataAgentIndex (uint3 id : SV_DispatchThreadID)
{	
	CurveStrokeData curveData = agentCurveStrokesReadCBuffer[0];
	
	agentCurveStrokesWriteCBuffer[_CurveStrokesUpdateAgentIndex] = curveData;	
}

[numthreads(1,1,1)]
void CSUpdateBodyStrokeDataAgentIndex (uint3 id : SV_DispatchThreadID)
{	
	BodyStrokeData bodyData = agentBodyStrokesReadCBuffer[0];
	
	agentBodyStrokesWriteCBuffer[bodyData.parentIndex] = bodyData;	
}

[numthreads(1,1,1)]
void CSUpdateEyeStrokeDataAgentIndex (uint3 id : SV_DispatchThreadID)
{	
	AgentEyeStrokeData eyeDataLeft = agentEyeStrokesReadCBuffer[0];
	AgentEyeStrokeData eyeDataRight = agentEyeStrokesReadCBuffer[1];
	
	agentEyeStrokesWriteCBuffer[eyeDataLeft.parentIndex * 2] = eyeDataLeft;	
	agentEyeStrokesWriteCBuffer[eyeDataRight.parentIndex * 2 + 1] = eyeDataRight;	
}

[numthreads(1,1,1)]
void CSUpdateDynamicStemBuffers (uint3 id : SV_DispatchThreadID)
{	
	StemData stemData = foodStemDataUpdateCBuffer[0];
	int foodIndex = foodStemDataUpdateCBuffer[0].foodIndex;	
	foodStemDataWriteCBuffer[foodIndex] = stemData;	
}
[numthreads(1,1,1)]
void CSUpdateDynamicLeafBuffers (uint3 id : SV_DispatchThreadID)
{	
	for(int i = 0; i < 16; i++) {
		LeafData leafData = foodLeafDataUpdateCBuffer[i];
		int foodIndex = leafData.foodIndex;	
		foodLeafDataWriteCBuffer[foodIndex * 16 + i] = leafData;	
	}
}
[numthreads(1,1,1)]
void CSUpdateDynamicFruitBuffers (uint3 id : SV_DispatchThreadID)
{	
	for(int i = 0; i < 64; i++) {
		FruitData fruitData = foodFruitDataUpdateCBuffer[i];
		int foodIndex = fruitData.foodIndex;

		foodFruitDataWriteCBuffer[foodIndex * 64 + i] = fruitData;
	}		
}

[numthreads(1,1,1)]
void CSPinRootTrailStrokesData (uint3 id : SV_DispatchThreadID)
{
	AgentSimData agentData = agentSimDataCBuffer[id.x];

	int trailPointIndex = id.x * 16;

	agentTrailStrokesWriteCBuffer[trailPointIndex].worldPos = agentData.worldPos - agentData.heading * agentData.size.y * 0.4;
}

[numthreads(1,1,1)]
void CSIterateTrailStrokesData (uint3 id : SV_DispatchThreadID)
{
	uint trailPointIndex = id.x;
	uint localTrailIndex = trailPointIndex % 16;

	uint agentIndex = floor(id.x / 16);
	AgentSimData agentData = agentSimDataCBuffer[agentIndex];
	
	float restDistance = 0.15 * agentData.size.y;
	restDistance = restDistance * (1 + (agentData.primaryHue.b - 0.5) * 1);

	if(localTrailIndex != 0) {			
		float2 parentPos = agentTrailStrokesReadCBuffer[trailPointIndex - 1].worldPos;
		float2 currentPos = agentTrailStrokesReadCBuffer[trailPointIndex].worldPos;
		
		float2 uv = saturate((currentPos + 70) / 140);
		float2 vel = velocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
		float speedMult = 1;

		currentPos += (vel * speedMult);

		float2 vecParentToCurrent = currentPos - parentPos;

		agentTrailStrokesWriteCBuffer[trailPointIndex].worldPos = parentPos + normalize(vecParentToCurrent) * restDistance;	
	}
}

[numthreads(1,1,1)]
void CSAlignFrameBufferStrokes (uint3 id : SV_DispatchThreadID)
{
	FrameBufferStrokeData data = terrainFrameBufferStrokesCBuffer[id.x];

	// find uv for sampling terrainHeightMap

	float2 uv = (data.worldPos.xy + 140) / 280;
	float pixelOffset = 1.0 / 512;  // resolution

	float altitudeCenter = terrainHeightTex.SampleLevel(_LinearRepeat, uv, 0).x;
	float altitudeNorth = terrainHeightTex.SampleLevel(_LinearRepeat, uv + float2(0, pixelOffset), 1).x;
	float altitudeEast = terrainHeightTex.SampleLevel(_LinearRepeat, uv + float2(pixelOffset, 0), 1).x;
	float altitudeSouth = terrainHeightTex.SampleLevel(_LinearRepeat, uv + float2(0, -pixelOffset), 1).x;
	float altitudeWest = terrainHeightTex.SampleLevel(_LinearRepeat, uv + float2(-pixelOffset, 0), 1).x;

	float dX = altitudeEast - altitudeWest;
	float dY = altitudeNorth - altitudeSouth;

	float2 grad = float2(1,0);

	if(dX != 0 && dY != 0) {
		grad = normalize(float2(dX, dY));
	}

	if(altitudeCenter < 0.6) {  // if underwater, follow topographical lines rather than steepestGrade:
		grad = float2(grad.y, -grad.x);
	}

	terrainFrameBufferStrokesCBuffer[id.x].heading = grad;
	terrainFrameBufferStrokesCBuffer[id.x].worldPos.z = altitudeCenter * 64 - 32;
}

[numthreads(64,1,1)]
void CSSimulateFruit (uint3 id : SV_DispatchThreadID)
{
	FruitData fruitData = foodFruitDataWriteCBuffer[id.x];
	FoodSimData foodData = foodSimDataCBuffer[fruitData.foodIndex];

	float orderVal = fmod(id.x, 64) / 64;
	float distToCore = minimum_distance(float2(0,-0.5), float2(0,0.5), fruitData.localCoords);
	float eatenLerp = saturate(((distToCore + 0.065) * 1.0 - foodData.foodAmount.r) * 8);

	float attached = 1; // = saturate(length(foodData.foodAmount));
	//float eatenLerp = saturate(((length(fruitData.localCoords) + 0.025) * 1 - foodData.foodAmount.r) * 16);
	if(eatenLerp > 0.5) {
		attached = 0;
	}
	fruitData.attached = attached;

	float2 curPos = fruitData.worldPos;
	
	float2 forwardFood = foodData.heading;
	float2 rightFood = float2(forwardFood.y, -forwardFood.x);
	float2 positionOffset = float2(fruitData.localCoords.x * rightFood * foodData.fullSize.x + fruitData.localCoords.y * forwardFood * foodData.fullSize.y) * 0.6 * saturate(foodData.growth * 1.46);

	float2 targetPos = foodData.worldPos + positionOffset; // + transformed offset of fruit

	float lerpSpeed = 0.1;
	float2 newPos = lerp(curPos, targetPos, lerpSpeed * fruitData.attached);

	float2 uv = (newPos + 70) / 140;
	float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	float speedMult = 0.033 * 140;

	newPos = newPos + fluidVel * speedMult;

	foodFruitDataWriteCBuffer[id.x].worldPos = newPos;
}


[numthreads(16,1,1)]
void CSSimulateCritterStrokes (uint3 id : SV_DispatchThreadID)
{
	// If detached, actual worldPos can lag behind pinned default position on agent:

	CritterStrokeData brushData = critterStrokesWriteCBuffer[id.x];
	int agentIndex = brushData.parentIndex;	
	CritterInitData critterInitData = critterInitDataCBuffer[agentIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[agentIndex];


	

	// Find new targetPosition
	float2 critterPosition = critterSimData.worldPos.xy;
					
	float2 curAgentSize = critterInitData.boundingBoxSize * lerp(critterInitData.spawnSizePercentage, 1, critterSimData.growthPercentage);

	// spriteCenterPos!!! ::::  ===========================================================================
	float2 centerPosition = brushData.localPos;
	
	centerPosition = foodBloatAnimPos(centerPosition, brushData.localPos.y, critterSimData.foodAmount);
	
	centerPosition = biteAnimPos(centerPosition, brushData.localPos.y, critterSimData.biteAnimCycle);
	
	centerPosition = centerPosition * curAgentSize * 0.5;
	
	float bodyAspectRatio = critterInitData.boundingBoxSize.y / critterInitData.boundingBoxSize.x;
	float bendStrength = 0.5 * saturate(bodyAspectRatio * 0.5 - 0.4);
	centerPosition = swimAnimPos(centerPosition, brushData.localPos.y, critterSimData.moveAnimCycle, critterSimData.accel, critterSimData.smoothedThrottle, bendStrength, critterSimData.turnAmount);
	
	centerPosition = rotatePointVector(centerPosition, float2(0,0), critterSimData.heading);

	float2 curWorldPos = brushData.worldPos;
	float2 newWorldPos = centerPosition + critterSimData.worldPos;

	float2 uv = (curWorldPos + 70) / 140;
	float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	float speedMult = 0.033 * 140;

	curWorldPos = curWorldPos + fluidVel * speedMult * 0.1;

	float attachThreshold = rand(brushData.localPos * 100); //critterSimData.health
	float pinnedAmount = saturate(100.0 * (critterSimData.health - attachThreshold)) * (1.0 - critterSimData.decayPercentage);   //brushData.strength;

	critterStrokesWriteCBuffer[id.x].worldPos = lerp(curWorldPos, newWorldPos, pinnedAmount);
}


// &&&&& OLD OLD OLD !!! &&&&&&&&&&&

/*[numthreads(1,1,1)]
void CSInitializeCurveBrushData (uint3 id : SV_DispatchThreadID)
{
	int agentIndex = agentInitializeCBuffer[id.x];	
	AgentSimData agentdata = agentSimDataCBuffer[agentIndex];
	
	float restDistance = 0.33;

	agentCurveStrokesWriteCBuffer[agentIndex].p0 = agentdata.worldPos; // pin root

	float2 targetPosP1 = agentdata.worldPos - agentdata.heading * restDistance;
	agentCurveStrokesWriteCBuffer[agentIndex].p1 = targetPosP1;

	float2 targetPosP2 = targetPosP1 - agentdata.heading * restDistance;
	agentCurveStrokesWriteCBuffer[agentIndex].p2 = targetPosP2;

	float2 targetPosP3 = targetPosP2 - agentdata.heading * restDistance;
	agentCurveStrokesWriteCBuffer[agentIndex].p3 = targetPosP3;
}

[numthreads(1,1,1)]
void CSIterateCurveBrushData (uint3 id : SV_DispatchThreadID)
{
	CurveStrokeData oldCurveData = agentCurveStrokesReadCBuffer[id.x];
	AgentSimData agentData = agentSimDataCBuffer[oldCurveData.parentIndex];
	
	float lerpStrength = 0.7;
	float lerpDecay = 0.6;
	float restDistance = 0.33;

	CurveStrokeData newCurveData;
	newCurveData.parentIndex = oldCurveData.parentIndex;
	newCurveData.hue = oldCurveData.hue;

	newCurveData.p0 = agentData.worldPos + (agentData.heading * agentData.size.y); // pin root to head tip

	float2 targetPosP1 = newCurveData.p0 - agentData.heading * restDistance;
	newCurveData.p1 = lerp(oldCurveData.p1, targetPosP1, lerpStrength);

	lerpStrength *= lerpDecay;

	float2 vec2to1 = oldCurveData.p2 - oldCurveData.p1;
	float2 targetPosP2 = oldCurveData.p1 - agentData.heading * restDistance;
	newCurveData.p2 = lerp(oldCurveData.p2, targetPosP2, lerpStrength);

	lerpStrength *= lerpDecay;

	float2 vec3to2 = oldCurveData.p3 - oldCurveData.p2;
	float2 targetPosP3 = oldCurveData.p2 - agentData.heading * restDistance;
	newCurveData.p3 = lerp(oldCurveData.p3, targetPosP3, lerpStrength);


	agentCurveStrokesWriteCBuffer[id.x] = newCurveData;
}*/

/*float restDistance = 0.4;

	float2 p0 = agentData.worldPos + agentData.heading * agentData.size.y * 0.0;
	
	float2 p1 = curveData.p1;
	float2 vec0to1 = p1 - p0; // after p0 has been moved, vector from old P1 to new P0	
	p1 = p0 + normalize(vec0to1) * restDistance; 

	float2 p2 = curveData.p2;
	float2 vec1to2 = p2 - p1;
	p2 = p1 + normalize(vec1to2) * restDistance; 

	float2 p3 = curveData.p3;
	float2 vec2to3 = p3 - p2;
	p3 = p2 + normalize(vec2to3) * restDistance; 

	agentCurveStrokesWriteCBuffer[id.x].p0 = p0;
	agentCurveStrokesWriteCBuffer[id.x].p1 = p1;
	agentCurveStrokesWriteCBuffer[id.x].p2 = p2;
	agentCurveStrokesWriteCBuffer[id.x].p3 = p3;
	*/

#pragma kernel CSSimulateSkinCritterStrokes
#pragma kernel CSUpdateCritterGenericStrokes
#pragma kernel CSSimulateCritterGenericStrokes
#pragma kernel CSSimulateCritterPortraitStrokes
#pragma kernel CSSimulateHighlightTrail

#include "Assets/Resources/Shaders/Inc/CritterBodyAnimation.cginc"
#include "Assets/Resources/Shaders/Inc/NoiseShared.cginc"

struct HighlightTrailData {
	float2 worldPos;
	float2 vel;
    float2 heading;
	float age;
    float strength;
};

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;
RWStructuredBuffer<CritterSkinStrokeData> critterSkinStrokesWriteCBuffer;

RWStructuredBuffer<HighlightTrailData> highlightTrailDataCBuffer;

StructuredBuffer<CritterGenericStrokeData> critterGenericStrokesUpdateCBuffer;
RWStructuredBuffer<CritterGenericStrokeData> critterGenericStrokesWriteCBuffer;

Texture2D<float4> terrainHeightTex;

Texture2D<float4> velocityRead;

uniform float _MapSize;

uniform float _Time;

uniform float4 _CursorCoords;
uniform int _SelectedCritterID;

uniform int _UpdateBufferStartIndex;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;

float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}


[numthreads(16,1,1)]
void CSSimulateSkinCritterStrokes (uint3 id : SV_DispatchThreadID)
{
		
	// If detached, actual worldPos can lag behind pinned default position on agent:
	
	CritterSkinStrokeData skinStrokeData = critterSkinStrokesWriteCBuffer[id.x];
	
	int agentIndex = skinStrokeData.parentIndex;	
	CritterInitData critterInitData = critterInitDataCBuffer[agentIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[agentIndex];

	float3 critterWorldPos = critterSimData.worldPos;
	float3 critterCurScale = critterInitData.boundingBoxSize * lerp(critterInitData.spawnSizePercentage, 1, critterSimData.growthPercentage) * 0.5;
		
	float3 spriteLocalPos = skinStrokeData.localPos * critterCurScale;
				
	float3 spriteWorldOffset = spriteLocalPos; // **** Vector from critter origin to sprite origin		
	// SWIM ANIMS:
	spriteWorldOffset = GetAnimatedPosOld(spriteWorldOffset, float3(0,0,0), critterInitData, critterSimData, skinStrokeData.localPos);		
			
	float3 newWorldPos = critterWorldPos + spriteWorldOffset;
	float3 curWorldPos = skinStrokeData.worldPos;

	// FLUID FLOW:
	float2 uv = curWorldPos.xy / _MapSize;
	float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 2).xy;
	float speedMult = 0.035 * _MapSize;
	curWorldPos.xy = curWorldPos.xy + fluidVel * speedMult;
	// NOISE:
	float3 noiseVel = Value3D(curWorldPos * 0.05, 17.75).yzw;	

	float pinnedAmount = saturate((1.0 - critterSimData.decayPercentage * 12));
	pinnedAmount = 1;
	
	float3 worldPosition = lerp(curWorldPos, newWorldPos, pinnedAmount);
			
	skinStrokeData.worldPos = worldPosition;
	critterSkinStrokesWriteCBuffer[id.x] = skinStrokeData;

}

// Can optimize by parallellizing this more (32 - 256 linear)
[numthreads(1,1,1)]
void CSUpdateCritterGenericStrokes (uint3 id : SV_DispatchThreadID)
{
	int masterIndex = _UpdateBufferStartIndex + id.x;
	
	CritterGenericStrokeData data;
	data = critterGenericStrokesUpdateCBuffer[id.x];

	critterGenericStrokesWriteCBuffer[masterIndex] = data;
}

[numthreads(16,1,1)]
void CSSimulateCritterGenericStrokes (uint3 id : SV_DispatchThreadID)
{
	CritterGenericStrokeData strokeData = critterGenericStrokesWriteCBuffer[id.x];
	int agentIndex = strokeData.parentIndex;

	CritterInitData critterInitData = critterInitDataCBuffer[agentIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[agentIndex];

	float3 critterWorldPos = critterSimData.worldPos;
	float3 critterCurScale = float3(1,1,1) * lerp(critterInitData.spawnSizePercentage, 1, critterSimData.growthPercentage) * 1; // *** should be 0.5??? *********
	
	// Decay progress value:
	float detachTimeRange = 0.25;
	float detachStartDelay = 0;
	float detachAmount = saturate((critterSimData.decayPercentage - detachStartDelay) / detachTimeRange - strokeData.thresholdValue * 1.5);

	float3 spriteLocalPos = strokeData.bindPos * critterCurScale * (1 - critterSimData.decayPercentage);
				
	float3 spriteWorldOffset = spriteLocalPos; // **** Vector from critter origin to sprite origin		
	// SWIM ANIMS:
	spriteWorldOffset = GetAnimatedPosNew(spriteWorldOffset, float3(0,0,0), critterInitData, critterSimData, strokeData, strokeData.t);		
		
	float3 worldNormal = GetAnimatedDirNew(strokeData.bindNormal, float3(0,0,0), critterInitData, critterSimData, strokeData.t);
	float3 worldTangent = GetAnimatedDirNew(strokeData.bindTangent, float3(0,0,0), critterInitData, critterSimData, strokeData.t);
		
	float3 newWorldPos = critterWorldPos + spriteWorldOffset;
	float3 curWorldPos = strokeData.worldPos;
		
	// FLUID FLOW:
	float2 uv = curWorldPos.xy / _MapSize;
	float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 2).xy;
	float speedMult = 0.035 * _MapSize * 0.5;
	curWorldPos.xy = curWorldPos.xy + fluidVel * speedMult * (strokeData.thresholdValue * 0.75 + 0.25);
	// NOISE:
	float3 noiseVel = Value3D(curWorldPos * 0.05 + strokeData.thresholdValue * 50, 17.75).yzw;
	float3 noiseVelNew = Value3D(curWorldPos * 0.8123 + strokeData.thresholdValue * 0.01, 1.75 / (critterInitData.boundingBoxSize.x + critterInitData.boundingBoxSize.z)).yzw;	
	curWorldPos.xy += noiseVel.xy * 0.033 * strokeData.thresholdValue;
	curWorldPos.z += 0.0002;
	newWorldPos.xyz += noiseVelNew.xyz * -0.00733 * (critterInitData.boundingBoxSize.x + critterInitData.boundingBoxSize.z);
	float pinnedAmount = saturate(((1.0 - (critterSimData.decayPercentage * 10) + strokeData.thresholdValue * 2) * 100));
	
	pinnedAmount = saturate((1 - detachAmount) - strokeData.passiveFollow); // - (1 - strokeData.t) * 0.45;
	
	float3 worldPosition = lerp(curWorldPos, newWorldPos, pinnedAmount);
				
	strokeData.worldPos = worldPosition;
	strokeData.worldNormal = worldNormal;
	strokeData.worldTangent = worldTangent;
	critterGenericStrokesWriteCBuffer[id.x] = strokeData;
}

[numthreads(16,1,1)]
void CSSimulateCritterPortraitStrokes (uint3 id : SV_DispatchThreadID)
{
	CritterGenericStrokeData strokeData = critterGenericStrokesWriteCBuffer[id.x];
	int agentIndex = 0; //strokeData.parentIndex;

	CritterInitData critterInitData = critterInitDataCBuffer[agentIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[agentIndex];

	float3 critterWorldPos = critterSimData.worldPos;
	float3 critterCurScale = float3(1,1,1) * lerp(critterInitData.spawnSizePercentage, 1, critterSimData.growthPercentage) * 1; // *** should be 0.5??? *********
	
	// Decay progress value:
	float detachTimeRange = 0.25;
	float detachStartDelay = 0;
	float detachAmount = saturate((critterSimData.decayPercentage - detachStartDelay) / detachTimeRange - strokeData.thresholdValue * 1.5);

	float3 spriteLocalPos = strokeData.bindPos * critterCurScale * (1 - critterSimData.decayPercentage);
				
	float3 spriteWorldOffset = spriteLocalPos; // **** Vector from critter origin to sprite origin		
	// SWIM ANIMS:
	spriteWorldOffset = GetAnimatedPosNew(spriteWorldOffset, float3(0,0,0), critterInitData, critterSimData, strokeData, strokeData.t);		
		
	float3 worldNormal = GetAnimatedDirNew(strokeData.bindNormal, float3(0,0,0), critterInitData, critterSimData, strokeData.t);
	float3 worldTangent = GetAnimatedDirNew(strokeData.bindTangent, float3(0,0,0), critterInitData, critterSimData, strokeData.t);
	

	// MUST HAVE BEEN SOME SORT OF NAN ERROR HERE ????  maybe 0 velocity?
	/*
	float3 newWorldPos = critterWorldPos + spriteWorldOffset;
	float3 curWorldPos = strokeData.worldPos;
		
	// FLUID FLOW:
	float2 uv = curWorldPos.xy / _MapSize;
	float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 2).xy;
	float speedMult = 0.035 * _MapSize * 0.5;
	curWorldPos.xy = curWorldPos.xy + fluidVel * speedMult * (strokeData.thresholdValue * 0.75 + 0.25);
	// NOISE:
	float3 noiseVel = Value3D(curWorldPos * 0.05 + strokeData.thresholdValue * 50, 17.75).yzw;
	float3 noiseVelNew = Value3D(curWorldPos * 0.8123 + strokeData.thresholdValue * 0.01, 1.75 / (critterInitData.boundingBoxSize.x + critterInitData.boundingBoxSize.z)).yzw;	
	curWorldPos.xy += noiseVel.xy * 0.033 * strokeData.thresholdValue;
	curWorldPos.z += 0.0002;
	newWorldPos.xyz += noiseVelNew.xyz * -0.00733 * (critterInitData.boundingBoxSize.x + critterInitData.boundingBoxSize.z);
	float pinnedAmount = saturate(((1.0 - (critterSimData.decayPercentage * 10) + strokeData.thresholdValue * 2) * 100));
	
	pinnedAmount = saturate((1 - detachAmount) - strokeData.passiveFollow); // - (1 - strokeData.t) * 0.45;
	
	float3 worldPosition = lerp(curWorldPos, newWorldPos, pinnedAmount);
	*/
	

	strokeData.worldPos = spriteWorldOffset; //strokeData.bindPos; //worldPosition;
	strokeData.worldNormal = worldNormal;
	strokeData.worldTangent = worldTangent;
	critterGenericStrokesWriteCBuffer[id.x] = strokeData;
}

[numthreads(1024,1,1)]
void CSSimulateHighlightTrail (uint3 id : SV_DispatchThreadID)
{
	int numParticles = 1024;
	int critterIndex = id.x / numParticles;
	int particleIndex = id.x;
	
	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	

	//float timeMask = 1.0 - saturate(abs((round(_Time * 30) % numParticles) - (id.x % numParticles)));
	float age = highlightTrailDataCBuffer[particleIndex].age;
	float timeMask = saturate(floor(age));
	age = age % 1.0;

	float spawnRadius = 4.20 * 2.5;
	float randomAngle = 6.28 * rand(float2(id.x,critterIndex));
	float randRadius = rand(float2(critterIndex,id.x));
	float2 randOffset = (float2(rand(float2((float)id.x, age)), rand(float2(age, (float)id.x))) * 2.0 - 1.0) * spawnRadius;
	randOffset = float2(cos(randomAngle) * randRadius * spawnRadius, sin(randomAngle) * randRadius * spawnRadius);
	float2 spawnPos = critterSimData.worldPos.xy + randOffset - critterSimData.heading * critterInitData.boundingBoxSize.z * critterInitData.spawnSizePercentage;

	float2 curPos = highlightTrailDataCBuffer[particleIndex].worldPos;
	
	float2 nextPos = lerp(curPos, spawnPos, timeMask);

	// FLUID FLOW:
	float2 uv = nextPos / _MapSize;
	float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 2).xy;
	float speedMult = 0.0167 * _MapSize;
	nextPos = nextPos + fluidVel * speedMult;

	// NOISE:
	float2 noiseVel = Value3D(float3(nextPos * 1, _Time * 05), 0.87).yz;
	//nextPos += noiseVel * 0.006;

	// CURSOR:
	float rawDist = length(_CursorCoords.xy - critterSimData.worldPos.xy);
	float cursorStr = saturate((-rawDist + 4.2));
	
	highlightTrailDataCBuffer[particleIndex].vel = fluidVel * speedMult;// + noiseVel * 0.006;
	highlightTrailDataCBuffer[particleIndex].worldPos = nextPos;
	highlightTrailDataCBuffer[particleIndex].age = age + 0.0157;
	highlightTrailDataCBuffer[particleIndex].strength = cursorStr;
}

/*   OLD:::::
[numthreads(16,1,1)]
void CSSimulateCritterStrokes (uint3 id : SV_DispatchThreadID)
{
	// If detached, actual worldPos can lag behind pinned default position on agent:

	CritterBodyStrokeData brushData = critterSkinStrokesWriteCBuffer[id.x];
	
	int agentIndex = brushData.parentIndex;	
	CritterInitData critterInitData = critterInitDataCBuffer[agentIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[agentIndex];
		
	
	// Find new targetPosition
	float2 critterPosition = critterSimData.worldPos.xy;
					
	float2 curAgentSize = critterInitData.boundingBoxSize * lerp(critterInitData.spawnSizePercentage, 1, critterSimData.growthPercentage);

	// spriteCenterPos!!! ::::  ===========================================================================
	float2 centerPosition = brushData.localPos;
	
	centerPosition = foodBloatAnimPos(centerPosition, brushData.localPos.y, critterSimData.foodAmount);
	
	centerPosition = biteAnimPos(centerPosition, brushData.localPos.y, critterSimData.biteAnimCycle);
	
	centerPosition = centerPosition * curAgentSize * 0.5;
	
	float bodyAspectRatio = critterInitData.boundingBoxSize.y / critterInitData.boundingBoxSize.x;
	float bendStrength = 0.5; // * saturate(bodyAspectRatio * 0.5 - 0.4);
	centerPosition = swimAnimPos(centerPosition, brushData.localPos.y, critterSimData.moveAnimCycle, critterSimData.accel, critterSimData.smoothedThrottle, bendStrength, critterSimData.turnAmount);
	
	centerPosition = rotatePointVector(centerPosition, float2(0,0), critterSimData.heading);

	float3 curWorldPos = brushData.worldPos;
	float3 newWorldPos = centerPosition + float3(critterSimData.worldPos, 0);

	float2 uv = curWorldPos.xy / _MapSize;
	float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	float speedMult = 0.033 * _MapSize;

	curWorldPos.xy = curWorldPos.xy + fluidVel * speedMult;

	float attachThreshold = rand(brushData.localPos.xy * 100); //critterSimData.health
	float pinnedAmount = saturate(100.0 * (critterSimData.health - attachThreshold)) * (1.0 - critterSimData.decayPercentage);   //brushData.strength;
	pinnedAmount *= 0.025;
	
	//critterSkinStrokesWriteCBuffer[id.x].strength  = critterSkinStrokesWriteCBuffer[id.x].strength + 0.006;

	if(pinnedAmount < 0.01) {
		
		critterSkinStrokesWriteCBuffer[id.x].lifeStatus = 0;
		critterSkinStrokesWriteCBuffer[id.x].strength = saturate(critterSkinStrokesWriteCBuffer[id.x].strength);
	}
	else {
		if(critterSkinStrokesWriteCBuffer[id.x].lifeStatus < 0.5) {
			critterSkinStrokesWriteCBuffer[id.x].strength = 0;
			critterSkinStrokesWriteCBuffer[id.x].lifeStatus = 1;
		}
		critterSkinStrokesWriteCBuffer[id.x].strength = min(0.5, critterSkinStrokesWriteCBuffer[id.x].strength);
		pinnedAmount = 1.0;
	}

	brushData.worldPos = lerp(curWorldPos, newWorldPos, pinnedAmount);

	critterSkinStrokesWriteCBuffer[id.x] = brushData;
}
*/
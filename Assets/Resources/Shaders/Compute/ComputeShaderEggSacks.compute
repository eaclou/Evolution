#pragma kernel CSSimulateEggs
#pragma kernel CSUpdateDynamicEggBuffers

#include "Assets/Resources/Shaders/Inc/NoiseShared.cginc"
#include "Assets/Resources/Shaders/Inc/StructsEggData.cginc"
#include "Assets/Resources/Shaders/Inc/CritterBodyAnimation.cginc"

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;
StructuredBuffer<EggSackSimData> eggSackSimDataCBuffer;
StructuredBuffer<EggData> eggDataUpdateCBuffer;
RWStructuredBuffer<EggData> eggDataWriteCBuffer;

Texture2D<float4> velocityRead;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;

uniform float _MapSize;

uniform float _Time;

float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

float length_squared(float2 v, float2 w) {
	float2 r = w - v;
	float distSqr = (r.x * r.x + r.y * r.y);
	return distSqr;
}

float minimum_distance(float2 v, float2 w, float2 p) {
	// Return minimum distance between line segment vw and point p
	const float l2 = length_squared(v, w);  // i.e. |w-v|^2 -  avoid a sqrt
	if (l2 == 0.0) {
	return length(v - p);   // v == w case
	}
	// Consider the line extending the segment, parameterized as v + t (w - v).
	// We find projection of point p onto the line. 
	// It falls where t = [(p-v) . (w-v)] / |w-v|^2
	// We clamp t from [0,1] to handle points outside the segment vw.
	const float t = max(0, min(1, dot(p - v, w - v) / l2));
	const float2 projection = v + t * (w - v);  // Projection falls on the segment
	return distance(p, projection);
}

[numthreads(64,1,1)]
void CSSimulateEggs (uint3 id : SV_DispatchThreadID)
{
	EggData eggData = eggDataWriteCBuffer[id.x];
	EggSackSimData eggSackSimData = eggSackSimDataCBuffer[eggData.eggSackIndex];

	float orderVal = fmod(id.x, 64) / 64;
	float distToCore = minimum_distance(float2(0,-0.5), float2(0,0.5), eggData.localCoords);
	float eatenLerp = saturate(((distToCore + 0.065) * 1.0 - eggSackSimData.foodAmount) * 8);

	float numEggsNormalized = eggSackSimData.health;
	float numEggsMask = saturate((numEggsNormalized - (1.0 - orderVal)) * 1000);
	//numEggsMask *= numEggsMask; // Purely Cosmetic -- tends too look sparser

	float attached = 0.64;
	eggData.attached = attached;

	float2 curPos = eggData.worldPos;
	
	float2 forwardFood = eggSackSimData.heading;
	float2 rightFood = float2(forwardFood.y, -forwardFood.x);
	float2 positionOffset = float2(eggData.localCoords.x * rightFood * eggSackSimData.fullSize.x + eggData.localCoords.y * forwardFood * eggSackSimData.fullSize.y) * 0.6 * saturate(eggSackSimData.growth) * saturate(eggSackSimData.health + 0.1) * saturate(1.0 - eggSackSimData.decay * 0.8);
		
	float2 targetPos = eggSackSimData.worldPos + positionOffset;

	float lerpSpeed = 1;
	float2 newPos = lerp(curPos, targetPos, lerpSpeed * eggData.attached);

	float2 uv = newPos / _MapSize;
	float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	float speedMult = 0.033 * _MapSize;

	// ** ADD WOBBLE HERE: &&&&&&
	float staticWobbleFreq = 2.40;
	float staticWobbleAmplitude = 0.5; // * eggSackSimData.growth;
	float2 staticWobblePhaseOffset = eggData.localCoords * _Time * staticWobbleFreq;

	float movingWobbleFreq = 0.00125;
	float movingWobbleAmplitude = 1.7 * length(eggSackSimData.velocity);
	float2 movingWobblePhaseOffset = curPos * movingWobbleFreq;
		
	float2 noiseInputVec = movingWobblePhaseOffset * movingWobbleAmplitude + staticWobblePhaseOffset * staticWobbleAmplitude;
	float3 noiseVal = Value2D(noiseInputVec, 1);

	float wobbleAmplitude = 0.1;
	float2 wobbleOffset = noiseVal.yz * wobbleAmplitude;
	// &&&&&&&&&&&&&&&&&&&&&&&&&&

	newPos = newPos + fluidVel * speedMult + wobbleOffset;

	eggDataWriteCBuffer[id.x].worldPos = newPos;
}

[numthreads(1,1,1)]
void CSUpdateDynamicEggBuffers (uint3 id : SV_DispatchThreadID)
{	
	for(int i = 0; i < 64; i++) {
		EggData eggData = eggDataUpdateCBuffer[i];
		int eggSackIndex = eggData.eggSackIndex;

		eggDataWriteCBuffer[eggSackIndex * 64 + i] = eggData;
	}		
}

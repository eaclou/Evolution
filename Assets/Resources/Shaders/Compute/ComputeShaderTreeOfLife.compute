// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSTick  // update positions, increment age, fake n-body sim
#pragma kernel CSAddNewSpeciesNode
#pragma kernel CSAddNewSpeciesStemSegments
#pragma kernel CSExctinctSpecies
#pragma kernel CSGetNodeColliderData


#include "Assets/Resources/Shaders/Inc/StructsTreeOfLife.cginc"

RWStructuredBuffer<TreeOfLifeNodeColliderData> treeOfLifeNodeColliderDataCBuffer;
RWStructuredBuffer<TreeOfLifeLeafNodeData> treeOfLifeLeafNodeDataCBuffer;
RWStructuredBuffer<TreeOfLifeStemSegmentData> treeOfLifeStemSegmentDataCBuffer;

StructuredBuffer<int> speciesIndexCBuffer;
StructuredBuffer<TreeOfLifeLeafNodeData> updateSpeciesNodeDataCBuffer;
StructuredBuffer<TreeOfLifeStemSegmentData> updateStemSegmentDataCBuffer;

uniform int _UpdateBufferStartIndex;

[numthreads(512,1,1)]
void CSTick (uint3 id : SV_DispatchThreadID)
{
	// Repel / Re-Position
	TreeOfLifeNodeColliderData colliderData = treeOfLifeNodeColliderDataCBuffer[id.x];
	TreeOfLifeLeafNodeData leafNodeData = treeOfLifeLeafNodeDataCBuffer[id.x];

	// compare to nearest neighbors:
	float3 ownPos = colliderData.localPos;
	float3 repelForce = float3(0,0,0);
	for(int i = 0; i < 32; i++) {
		int neighborIndex = max(0, i - 15);
		float3 neighborPos = treeOfLifeNodeColliderDataCBuffer[neighborIndex].localPos;

		float3 vecToNeighbor = neighborPos - ownPos;
		
		float dist = length(vecToNeighbor);
		if(dist < (leafNodeData.age * 0.5)) {
			repelForce += vecToNeighbor * -0.001;

			if(dist < 0.001) {
				repelForce += ((float)neighborIndex - (float)id.x) * 0.051;
			}
		}		
	}

	// AttractForce:
	float3 targetPos = float3((float)leafNodeData.graphDepth * 1 * 0.85, treeOfLifeNodeColliderDataCBuffer[leafNodeData.parentSpeciesID].localPos.y - leafNodeData.isExtinct * 0.5, 0.0);
	float3 vecToTarget = targetPos - ownPos;
	float3 attractForce = vecToTarget * 0.001;

	//repelForce.x *= 0.55;
	//repelForce.z *= 2.0;
	//attractForce.y *= 0.01;
	//attractForce.x *= 0.35;
	colliderData.localPos += (repelForce + attractForce) * (1.1 - leafNodeData.isExtinct);
	//colliderData.localPos.z = 0;
	
	treeOfLifeNodeColliderDataCBuffer[id.x] = colliderData;

	treeOfLifeNodeColliderDataCBuffer[0].localPos = float3(0,0,0); // *** REFACTOR!!!! ***

	// Increment Age
	leafNodeData.age = saturate(leafNodeData.age + 0.0015);
	leafNodeData.decayPercentage = saturate(leafNodeData.decayPercentage + 0.001 * leafNodeData.isExtinct);
	treeOfLifeLeafNodeDataCBuffer[id.x] = leafNodeData;

}

[numthreads(1,1,1)]
void CSAddNewSpeciesNode (uint3 id : SV_DispatchThreadID)
{
	int speciesID = speciesIndexCBuffer[id.x];	
	treeOfLifeLeafNodeDataCBuffer[speciesID] = updateSpeciesNodeDataCBuffer[0];
	
	int parentSpeciesID = treeOfLifeLeafNodeDataCBuffer[speciesID].parentSpeciesID;
	float3 parentLocalPos = treeOfLifeNodeColliderDataCBuffer[parentSpeciesID].localPos;
	treeOfLifeNodeColliderDataCBuffer[speciesID].localPos = float3(parentLocalPos.x + 0.015, parentLocalPos.y - (float)(speciesID) * 0.005, parentLocalPos.z - (float)speciesID * 0.0025);
		
}

[numthreads(1,1,1)]
void CSAddNewSpeciesStemSegments (uint3 id : SV_DispatchThreadID)
{
	int stemSegmentIndex = _UpdateBufferStartIndex + id.x;
	treeOfLifeStemSegmentDataCBuffer[stemSegmentIndex] = updateStemSegmentDataCBuffer[id.x];
	
	//treeOfLifeStemSegmentDataCBuffer[6].speciesID = 1;
	//treeOfLifeStemSegmentDataCBuffer[4].fromID = 4;
	//treeOfLifeStemSegmentDataCBuffer[id.x].toID = 1;

	//TreeOfLifeStemSegmentData newData;
	//newData.speciesID = 2;
	//newData.fromID = 0;
	//newData.toID = 2;
	//treeOfLifeStemSegmentDataCBuffer[0] = newData;
	//treeOfLifeStemSegmentDataCBuffer[5].speciesID = 10;
	//treeOfLifeStemSegmentDataCBuffer[5].fromID = 3;
}

[numthreads(1,1,1)]
void CSExctinctSpecies (uint3 id : SV_DispatchThreadID)
{
	int speciesID = speciesIndexCBuffer[id.x];	
	treeOfLifeLeafNodeDataCBuffer[speciesID].isExtinct = updateSpeciesNodeDataCBuffer[id.x].isExtinct;
	
	//int parentSpeciesID = treeOfLifeLeafNodeDataCBuffer[speciesID].parentSpeciesID;
	//float3 parentLocalPos = treeOfLifeNodeColliderDataCBuffer[parentSpeciesID].localPos;
	//treeOfLifeNodeColliderDataCBuffer[speciesID].localPos = float3(parentLocalPos.x + 0.015, parentLocalPos.y - (float)(speciesID) * 0.005, parentLocalPos.z - (float)speciesID * 0.0025);
	
}

[numthreads(1,1,1)]
void CSGetNodeColliderData (uint3 id : SV_DispatchThreadID)
{
	
}

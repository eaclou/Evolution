// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSUpdateGroundStrokes
#pragma kernel CSGetObjectDepths
#pragma kernel CSGenerateMeshData
#pragma kernel CSGenerateTriangleIndices
#pragma kernel CSSimDecomposerBitsData
#pragma kernel CSSimWasteBitsData
#pragma kernel CSInitTerrainMaps
#pragma kernel CSUpdateTerrainMapsBrush
#pragma kernel CSUpdateTerrainMapsConvolution

struct TriangleIndexData {
    int v1;
    int v2;
    int v3;
};

struct GroundBitsData
{
	int index;
	float3 worldPos;
	float2 heading;
	float2 localScale;
	float age;
	float speed;
	float noiseVal;
	float isActive;
	int brushType;
};

struct FrameBufferStrokeData {
	float3 worldPos;
	float2 scale;
	float2 heading;
	int brushType;
};

struct EnvironmentStrokeData {
	float3 worldPos;
	float2 scale;
	float2 heading;
	float isActive;
	int brushType;
	// extra stuff:
	// mass, type,
	// velocity, accel
};

#include "Assets/Resources/Shaders/Inc/NoiseShared.cginc"

StructuredBuffer<float4> ObjectPositionsCBuffer;
RWStructuredBuffer<float4> DepthValuesCBuffer;

//Texture2D<float4> heightTexture;
RWStructuredBuffer<float3> terrainVertexCBuffer;
RWStructuredBuffer<float2> terrainUVCBuffer;
RWStructuredBuffer<float3> terrainNormalCBuffer;
RWStructuredBuffer<float4> terrainColorCBuffer;
RWStructuredBuffer<TriangleIndexData> terrainTriangleCBuffer;

RWStructuredBuffer<GroundBitsData> groundBitsCBuffer;

RWStructuredBuffer<EnvironmentStrokeData> terrainFrameBufferStrokesCBuffer;

Texture2D<float4> VelocityRead;
Texture2D<float4> AltitudeRead;
RWTexture2D<float4> AltitudeWrite;
Texture2D<float4> SpiritBrushRead;
RWTexture2D<float4> TerrainColorWrite;
uniform float _IsUpdateTerrainColor;
Texture2D<float4> _ResourceGridRead;  // for decomposer bits which are in this file for whatever reason...
Texture2D<float4> _WaterSurfaceTex;
Texture2D<float4> _SkyTex;

Texture2D<float4> _SimTextureBetaRead;
RWTexture2D<float4> _SimTextureBetaWrite;

uniform float _BrushIntensity;
uniform float4 _Color0;
uniform float4 _Color1;
uniform float4 _Color2;
uniform float4 _Color3;
uniform int _ChannelID = 0;			
uniform float _AddSubtractSign = 1; 

int _MeshResolution = 32;  // even necessary?

float4 _QuadBounds;  // xy = min, zw = max
float2 _HeightRange;

uniform float4 _WorldSpaceCameraPosition;
uniform float _CamDistNormalized;
uniform float4 _SpawnBoundsCameraDetails;

uniform float _TextureResolution;
uniform float _DeltaTime;
uniform float _InvGridScale;
uniform float _MapSize;

uniform float _Time;

uniform float4 _SpawnPos;
uniform float _SpawnRadius;
uniform float _DecomposerDensityLerp;

uniform float _BrushAlignment = 1.0;

uniform float _GlobalWaterLevel;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;
SamplerState _PointClamp;
SamplerState _PointRepeat;

float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

[numthreads(256,1,1)]
void CSUpdateGroundStrokes (uint3 id : SV_DispatchThreadID)
{
	EnvironmentStrokeData data = terrainFrameBufferStrokesCBuffer[id.x];

	// find uv for sampling terrainHeightMap

	float2 uv = data.worldPos.xy / _MapSize;
	float pixelOffset = 1.0 / 128;  // resolution

	float4 altitudeSampleCenter = AltitudeRead.SampleLevel(_LinearClamp, uv, 0);
	float4 altitudeSampleNorth = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(0, pixelOffset), 0);
	float4 altitudeSampleEast = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(pixelOffset, 0), 0);
	float4 altitudeSampleSouth = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(0, -pixelOffset), 0);
	float4 altitudeSampleWest = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(-pixelOffset, 0), 0);

	float altitudeCenter = altitudeSampleCenter.x;  // x now represents stone
	float altitudeNorth = altitudeSampleNorth.x;
	float altitudeEast = altitudeSampleEast.x;
	float altitudeSouth = altitudeSampleSouth.x;
	float altitudeWest = altitudeSampleWest.x;

	float dX = altitudeEast - altitudeWest;
	float dY = altitudeNorth - altitudeSouth;

	float2 gradDir = float2(dX,dY); 
	float2 topoDir = float2(dY,-dX);
	float randAngle = Value2D(uv, 1000).x * 6.28;
	float2 randDir = float2(cos(randAngle), sin(randAngle));

	float2 heading = topoDir; // lerp(gradDir, randDir, altitudeSampleCenter.y); 
	//heading = lerp(heading, topoDir, altitudeSampleCenter.z);  // was pebbles, now is sand
	//heading = lerp(heading, topoDir, altitudeSampleCenter.w); 
	
	if(heading.x != 0 && heading.y != 0) {
		heading = normalize(heading);
	}
	else {
		heading = normalize(randDir);
	}

	// New code:
	// Brushstrokes vary in:  (heading, brush alpha)

	float isActive = saturate((altitudeSampleCenter.w - 0.15) * 1000);
	
	terrainFrameBufferStrokesCBuffer[id.x].isActive = isActive;
	terrainFrameBufferStrokesCBuffer[id.x].heading = heading;
	terrainFrameBufferStrokesCBuffer[id.x].worldPos.z = -altitudeCenter * 20 + 10;
}

[numthreads(64,1,1)]
void CSGetObjectDepths (uint3 id : SV_DispatchThreadID)
{				
	float4 data = ObjectPositionsCBuffer[id.x];
	
	float2 uv = saturate(data.xy);
	
	float pixSize = (1 / _TextureResolution);
	float2 uvOffset = float2(1,1) * pixSize; // data.zw;
	
	float4 depthCenter = AltitudeRead.SampleLevel(_LinearClamp, uv, 0);
	float4 sampleLeft = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(-uvOffset.x, 0), 0);
	float4 sampleRight = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(uvOffset.x, 0), 0);
	float4 sampleUp = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(0, uvOffset.y), 0);
	float4 sampleDown = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(0, -uvOffset.y), 0);

	float depthLeft = max(sampleLeft.x, (1.0 - sampleLeft.w));
	float depthRight = max(sampleRight.x, (1.0 - sampleRight.w));
	float depthUp = max(sampleUp.x, (1.0 - sampleUp.w));
	float depthDown = max(sampleDown.x, (1.0 - sampleDown.w));

	float2 grad = float2(depthRight - depthLeft, depthUp - depthDown);

	//float3 depth = float3(1.0 - saturate(depthCenter * 2.0), -grad); // (velLeft + velRight + velUp + velDown) / 4;

	float4 depthStats = float4(saturate(depthCenter.x), grad, depthCenter.w);
	
	DepthValuesCBuffer[id.x] = depthStats;
}

[numthreads(1024,1,1)]
void CSSimDecomposerBitsData (uint3 id : SV_DispatchThreadID)
{	
	GroundBitsData decomposerBitData = groundBitsCBuffer[id.x];

	if(decomposerBitData.isActive > 0.5) {  // ALIVE!
		
		float2 uv = decomposerBitData.worldPos.xy / _MapSize;		
		float4 altitudeTexSample = AltitudeRead.SampleLevel(_LinearClamp, uv, 0);
		float altitudeRaw = altitudeTexSample.x;
		float worldActiveMask = saturate(altitudeTexSample.w * 10);
		
		// faster aging outside world bounds
		decomposerBitData.age = decomposerBitData.age + 0.0065 + (1.0 - worldActiveMask) * 0.01;  // ? frame lifespan

		// if should be killed:
		if(decomposerBitData.age > 1.0) {
			decomposerBitData.isActive = 0;
			// age resetting happens at birth	
		}
		else {
			
			float2 vel = VelocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
			float speedMult = 0.0075;

			decomposerBitData.speed = length(vel);
	
			float2 nextPos = uv + vel * speedMult;
			
			float pixelOffset = 1.0 / 256;  // resolution  // **** THIS CAN"T BE HARDCODED AS FINAL ****"

			float altitudeCenter = AltitudeRead.SampleLevel(_LinearClamp, uv, 0).x;
			float altitudeNorth = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(0, pixelOffset), 0).x;
			float altitudeEast = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(pixelOffset, 0), 0).x;
			float altitudeSouth = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(0, -pixelOffset), 0).x;
			float altitudeWest = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(-pixelOffset, 0), 0).x;

			float dX = altitudeEast - altitudeWest;
			float dY = altitudeNorth - altitudeSouth;

			float2 grad = float2(0,1);
			if(dX != 0 && dY != 0) {
				grad = normalize(lerp(float2(dX, dY), float2(0,1), 0.5));
			}
		
			decomposerBitData.heading = grad;
			decomposerBitData.worldPos = float3(nextPos * _MapSize, 0);		
		}
	}
	else { // DEAD / INACTIVE:::
		
		// check potential spawn location:
		float2 spawnUV = float2(rand(float2(id.x, _Time * 120)), rand(float2(-_Time, id.x + _Time * 89.913)));
		
		float2 spawnPos = spawnUV * _MapSize;
		
		float noiseFreq = 4.2;
		float spawnNoise1 = Value2D(spawnPos + 5, noiseFreq * 0.2755).x;
		float spawnNoise2 = Value2D(spawnPos - 33, noiseFreq * 0.3254).x;
		float spawnNoise3 = saturate(Value2D(spawnPos + 349.7, 2.4579).x * 2.5);
		
		// Try respawning:
		float4 resourceGridSample = _ResourceGridRead.SampleLevel(_LinearClamp, spawnUV, 0);  // ** actually the resourceGrid Tex -- rename
		float spawnRating = resourceGridSample.z;

		float distToOrigin = length(_SpawnPos.xy - (spawnUV * _MapSize));
		if(spawnRating > 0.025) {			
			spawnPos += float2(spawnNoise1, spawnNoise2) * 0.93416;		
			decomposerBitData.worldPos = float3(spawnPos, 0);
			decomposerBitData.age = decomposerBitData.age % 1.0;
			decomposerBitData.isActive = 1.0;
		}		
	}
	
	groundBitsCBuffer[id.x] = decomposerBitData;
	
}

[numthreads(1024,1,1)]
void CSSimWasteBitsData (uint3 id : SV_DispatchThreadID)
{	
	GroundBitsData wasteBitData = groundBitsCBuffer[id.x];

	if(wasteBitData.isActive > 0.5) {  // ALIVE!
		
		if(wasteBitData.age > 1.0) {  // OLD AGE DEATH:::
			wasteBitData.isActive = 0.0;			

		}
		else {   // ALIVE && ACTIVE
			float2 uv = wasteBitData.worldPos.xy / _MapSize;		
			float4 altitudeTexSample = AltitudeRead.SampleLevel(_LinearClamp, uv, 0);
			float altitudeRaw = altitudeTexSample.x;
			float worldActiveMask = saturate(altitudeTexSample.w * 10);

			float2 vel = VelocityRead.SampleLevel(_LinearClamp, uv, 0).xy;
			float speedMult = 0.0;
			wasteBitData.speed = length(vel);
	
			float2 nextPos = uv + vel * speedMult;

			  // Accelerate Aging Rate if outside world bounds
			wasteBitData.age = wasteBitData.age + 0.0045 + (1.0 - worldActiveMask) * 0.01;  // ? frame lifespan
			wasteBitData.worldPos = float3(nextPos * _MapSize, 0);		
		}


	}
	else {  // INACTIVE::::
	
		//float2 spawnPos = float2(rand(float2(id.x, _Time * 120)), rand(float2(-_Time, id.x + _Time * 89.913)));		
		//float2 spawnBoxSize = float2(_SpawnBoundsCameraDetails.z - _SpawnBoundsCameraDetails.x, _SpawnBoundsCameraDetails.w - _SpawnBoundsCameraDetails.y);
		//spawnPos = spawnPos * spawnBoxSize + _SpawnBoundsCameraDetails.xy;
		
		// check potential spawn location:
		float2 spawnUV = float2(rand(float2(id.x, _Time * 120)), rand(float2(-_Time, id.x + _Time * 89.913)));
		float2 spawnPos = spawnUV * _MapSize;
		
		float noiseFreq = 4.2;
		float spawnNoise1 = Value2D(spawnPos + 5, noiseFreq * 0.2755).x;
		float spawnNoise2 = Value2D(spawnPos - 33, noiseFreq * 0.3254).x;
		
		// Try respawning:
		float4 resourceGridSample = _ResourceGridRead.SampleLevel(_LinearClamp, spawnUV, 0);  // ** actually the resourceGrid Tex -- rename
		float spawnRating = resourceGridSample.y;  // WASTE

		float distToOrigin = length(_SpawnPos.xy - (spawnUV * _MapSize));
		if(spawnRating > 0.025) {			
			spawnPos += float2(spawnNoise1, spawnNoise2) * 0.93416;		
			wasteBitData.worldPos = float3(spawnPos, 0);
			wasteBitData.age = wasteBitData.age % 1.0;
			wasteBitData.heading = normalize(float2(spawnNoise1, spawnNoise2));
			wasteBitData.isActive = 1.0;
			
		}	
	}
	
	groundBitsCBuffer[id.x] = wasteBitData;
	
}

[numthreads(1,1,1)]
void CSGenerateMeshData (uint3 id : SV_DispatchThreadID)
{
	int index = id.x * _MeshResolution + id.z;

	float xRange = _QuadBounds.y - _QuadBounds.x;
	float zRange = _QuadBounds.w - _QuadBounds.z;
	float xPart = (float)id.x / (float)(_MeshResolution - 1);
	float zPart = (float)id.z / (float)(_MeshResolution - 1);
	float x = xPart * xRange + _QuadBounds.x;
	float z = zPart * zRange + _QuadBounds.z;  // worldCoords
		
	float2 uv = float2(xPart,zPart);
	
	float4 textureSample =  AltitudeRead.SampleLevel(_LinearClamp, uv, 0);

	float heightRange = _HeightRange.y - _HeightRange.x;
	float height = (1.0 - textureSample.x) * heightRange + _HeightRange.x;
	
	terrainVertexCBuffer[index] = float3(x, z, height);
	terrainUVCBuffer[index] = uv;
	terrainNormalCBuffer[index] = float3(0,0,1);

	//COLOR:	
	terrainColorCBuffer[index] = float4(1, 1, 1, 1);	
}

[numthreads(1,1,1)]
void CSGenerateTriangleIndices (uint3 id : SV_DispatchThreadID)
{
	TriangleIndexData triangleIndexData0;
	TriangleIndexData triangleIndexData1;

	int index0 = (id.x * (_MeshResolution - 1) + id.z) * 2;
	int index1 = index0 + 1;

	int v00 = id.x * _MeshResolution + id.z;
	int v10 = (id.x + 1) * _MeshResolution + id.z;
	int v01 = id.x * _MeshResolution + (id.z + 1);
	int v11 = (id.x + 1) * _MeshResolution + (id.z + 1);

	triangleIndexData0.v1 = v00;
	triangleIndexData0.v2 = v01;
	triangleIndexData0.v3 = v11;

	triangleIndexData1.v1 = v00;
	triangleIndexData1.v2 = v11;
	triangleIndexData1.v3 = v10;

	terrainTriangleCBuffer[index0] = triangleIndexData0;
	terrainTriangleCBuffer[index1] = triangleIndexData1;
}

[numthreads(32,32,1)]
void CSInitTerrainMaps (uint3 id : SV_DispatchThreadID)
{
	float2 uv = (float2)id.xy / _TextureResolution;
	float4 texSample = AltitudeRead.SampleLevel(_LinearClamp, uv, 0);

	
	float2 noiseCoords = uv * 128;
	float noise0 = saturate(Value2D(noiseCoords + 572, 0.0255).x);
	float noise1 = saturate(Value2D(noiseCoords + 5, 0.055).x);
	float noise2 = saturate(Value2D(noiseCoords - 33, 0.15).x);
	float noise3 = saturate(Value2D(noiseCoords + 349.7, 0.4579).x);

	float noise10 = saturate(Value2D(noiseCoords + 5.72, 0.0155).x);
	float noise11 = saturate(Value2D(noiseCoords - 5, 0.035).x);
	float noise12 = saturate(Value2D(noiseCoords + 22, 0.0915).x);
	float noise13 = saturate(Value2D(noiseCoords - 349.7, 0.6579).x);

	float initY = saturate(noise0 * 0.9 + noise1 * 0.85 + noise2 * 0.65 + noise3 * 0.35 - 0.35);
	float initZ = saturate((noise10 * 0.8 + noise11 * 0.65 + noise12 * 0.55 + noise13 * 0.55) - 0.035);
	float initW = saturate(((1.0 - noise10) * 0.75 + (1.0 - noise1) * 0.65 + (1.0 - noise12) * 0.45 - (1.0 - noise3) * 0.25) - 0.75);

	float distToCenter = length(uv - 0.5);


	float4 outputTex = float4(saturate(texSample.x * 0.3 + distToCenter * 0.6 - 0.05), 
								initY * initY, 
								initZ * initZ, 
								initW * initW);
	
	outputTex.w = saturate(1.0 - distToCenter * 10);
	AltitudeWrite[id.xy] = outputTex;
}

float4 GetTerrainColor(float4 terrainCompositionData) {
	return terrainCompositionData;
}
[numthreads(32,32,1)]
void CSUpdateTerrainMapsBrush (uint3 id : SV_DispatchThreadID)
{
	float2 uv = ((float2)id.xy + 0.5) / _TextureResolution;
	float4 texSample = AltitudeRead[id.xy]; //    .SampleLevel(_LinearClamp, uv, 0);

	float4 brushSample = SpiritBrushRead.SampleLevel(_LinearClamp, uv, 0);
	
	// WHICH CHANNEL????
	if(_ChannelID == 0) {  // WORLD SPIRIT
		texSample.w = saturate(texSample.w + brushSample.x * _AddSubtractSign * _BrushIntensity);
	}

	if(_ChannelID == 1) {
		texSample.x = saturate(texSample.x + brushSample.x * _AddSubtractSign * _BrushIntensity);
		//texSample.y = saturate(texSample.y + brushSample.x * _AddSubtractSign * _BrushIntensity);
	}

	if(_ChannelID == 2) {
		texSample.x = saturate(texSample.x + brushSample.x * _AddSubtractSign * _BrushIntensity * 0.5); 
		texSample.y = saturate(texSample.y + brushSample.x * _AddSubtractSign * _BrushIntensity);
	}

	if(_ChannelID == 3) {
		texSample.x = saturate(texSample.x + brushSample.x * _AddSubtractSign * _BrushIntensity * 0.25);
		texSample.z = saturate(texSample.z + brushSample.x * _AddSubtractSign * _BrushIntensity);
	}

	float4 finalColor = _Color0;   // BASE STONE COLOR:	
	finalColor = lerp(finalColor, _Color1, saturate(texSample.y));
	finalColor = lerp(finalColor, _Color2, saturate(texSample.z));
	//finalColor = lerp(finalColor, _Color3, saturate(texSample.w));  // W Channel is just alpha (active sim) mask!
			
	float4 altitudeTex = texSample;
	float4 waterSurfaceTex = _WaterSurfaceTex.SampleLevel(_LinearClamp, uv, 0);
	float4 resourceTex = _ResourceGridRead.SampleLevel(_LinearClamp, uv, 0);
	float4 spiritBrushTex = brushSample;
		
	float causticsStrength = 0.4;
	float minFog = 1;
	
	float3 decomposerHue = float3(0.8,0.3,0);
	float decomposerMask = saturate(resourceTex.z * 1) * 0.8;
	float3 detritusHue = float3(0.2,0.1,0.02);
	float detritusMask = saturate(resourceTex.y * 1) * 0.8;
	float3 algaeColor = float3(0.5,0.8,0.5) * 0.5;
	float algaeMask = saturate(resourceTex.w * 2.70);


	finalColor.rgb = lerp(finalColor.rgb, decomposerHue, decomposerMask);
	finalColor.rgb = lerp(finalColor.rgb, detritusHue, detritusMask);
	finalColor.rgb = lerp(finalColor.rgb, algaeColor, algaeMask);
	
	
	float altitudeRaw = altitudeTex.x;
	
	float3 waterFogColor = float3(0.36, 0.4, 0.44) * 0.43;
	
	waterFogColor = lerp(waterFogColor, algaeColor, algaeMask);

	float3 sunDir = normalize(float3(-1,0.75,-1));

	// FAKE CAUSTICS:::
	float3 waterSurfaceNormal = waterSurfaceTex.yzw; // pre-calculated
	float dotLight = dot(waterSurfaceNormal, sunDir);     //_WorldSpaceLightPos0.xyz);
	dotLight = dotLight * dotLight;
	
	float altitude = altitudeRaw + waterSurfaceTex.x * 0.05;
				
	float visualCheatWaterLevelBias = 0.02;
	float depth = saturate(-altitude + _GlobalWaterLevel + visualCheatWaterLevelBias);
	float isUnderwater = saturate(depth * 50);

	
	//Diffuse
	float pixelOffset = 1.0 / 256;  // resolution  // **** THIS CAN"T BE HARDCODED AS FINAL ****"
	//float altitudeCenter = AltitudeRead.SampleLevel(_LinearClamp, uv, 0).x;
	float altitudeNorth = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(0, pixelOffset), 0).x;
	float altitudeEast = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(pixelOffset, 0), 0).x;
	float altitudeSouth = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(0, -pixelOffset), 0).x;
	float altitudeWest = AltitudeRead.SampleLevel(_LinearClamp, uv + float2(-pixelOffset, 0), 0).x;

	float dX = altitudeEast - altitudeWest;
	float dY = altitudeNorth - altitudeSouth;

	float2 grad = float2(0,1);
	if(dX != 0 && dY != 0) {
		grad = normalize(float2(dX, dY));
	}
	float3 groundSurfaceNormal = normalize(float3(-grad.x, -grad.y, -length(float2(dX,dY)))); ////normalize(altitudeTex.yzw);
	groundSurfaceNormal.z *= -1;
	
	float3 diffuseSurfaceNormal = lerp(groundSurfaceNormal, waterSurfaceNormal, depth);
	float dotDiffuse = dot(diffuseSurfaceNormal, sunDir);
	float diffuseWrap = dotDiffuse * 0.5 + 0.5;
	finalColor.rgb *= (0.7 + dotDiffuse * 0.33 + 0.1 * diffuseWrap);

	// Wetness darkening:
	float wetnessMask = 1.0 - saturate((-altitude + _GlobalWaterLevel + 0.033) * 25.5); // saturate(((altitudeRaw + waterSurfaceTex.x * 0.34) - 0.6) * 5.25);
	finalColor.rgb *= (0.4 + wetnessMask * 0.6);
	
	// Caustics
	finalColor.rgb += dotLight * isUnderwater * (1.0 - depth) * causticsStrength;		
	
	// FOG:	
	float fogAmount = lerp(0, 1, depth * 2);
	finalColor.rgb = lerp(finalColor.rgb, waterFogColor, fogAmount * isUnderwater);
		
	// Reflection!!!
	float3 worldPos = float3(uv * _MapSize, (altitudeRaw - 0.5) * -10);
	float3 cameraToVertex = worldPos - _WorldSpaceCameraPosition.xyz;
	float3 cameraToVertexDir = normalize(cameraToVertex);
	float3 reflectedViewDir = cameraToVertexDir + 2 * waterSurfaceNormal * 0.5;
	float viewDot = 1.0 - saturate(dot(-cameraToVertexDir, waterSurfaceNormal));
					
	float2 skyCoords = reflectedViewDir.xy * 0.5 + 0.5;
	float4 skyTex = _SkyTex.SampleLevel(_LinearClamp, skyCoords, 0);
	float4 reflectedColor = float4(skyTex.rgb, finalColor.a); //col;
	
	viewDot * 0.3 + 0.2;		
	float reflectLerp = saturate(viewDot * isUnderwater);
	finalColor.rgb += lerp(float3(0,0,0), reflectedColor.xyz, reflectLerp);

	finalColor.rgb += spiritBrushTex.x;
				
	finalColor.a = 1; 

	TerrainColorWrite[id.xy] = finalColor;	

	AltitudeWrite[id.xy] = texSample;
}
[numthreads(32,32,1)]
void CSUpdateTerrainMapsConvolution (uint3 id : SV_DispatchThreadID)
{
	float4 texSample = AltitudeRead[id.xy];

	AltitudeWrite[id.xy] = texSample;
}


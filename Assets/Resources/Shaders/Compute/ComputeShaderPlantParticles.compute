////#pragma kernel CSMeasureInitCritterDistances
#pragma kernel CSMeasureInitCursorDistances
#pragma kernel CSNewMeasureDistancesInit
#pragma kernel CSNewMeasureDistancesMainA
//#pragma kernel CSReduceCritterDistances32
//#pragma kernel CSReduceCritterDistances1
#pragma kernel CSFetchParticleByID
#pragma kernel CSEatSelectedFoodParticles
#pragma kernel CSCopyFoodParticlesBuffer
#pragma kernel CSMeasureTotalFoodParticlesAmount
#pragma kernel CSSpawnInitialAlgaeParticles
#pragma kernel CSSimulateAlgaeParticles

#include "Assets/Resources/Shaders/Inc/StructsCritterData.cginc"
#include "Assets/Resources/Shaders/Inc/StructsPlantParticles.cginc"

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;

StructuredBuffer<PlantParticleData> foodParticlesRead;
RWStructuredBuffer<PlantParticleData> foodParticlesWrite;
RWTexture2D<float4> foodParticlesNearestCrittersRT;

RWStructuredBuffer<PlantParticleData> closestParticlesDataCBuffer;

RWTexture2D<float4> _CritterToPlantDistancesRT;
RWStructuredBuffer<float4> _ClosestPlantIndexCBuffer;
StructuredBuffer<float4> _CritterToPlantDistancesRead;

RWStructuredBuffer<PlantParticleData> selectedPlantParticleDataCBuffer;
StructuredBuffer<float4> cursorDistancesRead; // used to reduce foodParticlesNearestCrittersRT down to minimum distances
RWStructuredBuffer<float4> cursorDistancesWrite;

StructuredBuffer<PlantParticleData> _RepresentativeAlgaeParticleGenomeCBuffer;

StructuredBuffer<float> foodParticlesEatAmountsRead;
RWStructuredBuffer<float> foodParticlesEatAmountsCBuffer;

StructuredBuffer<int> selectRespawnFoodParticleIndicesCBuffer;

Texture2D<float4> critterDistancesRead; // used to reduce foodParticlesNearestCrittersRT down to minimum distances
RWTexture2D<float4> critterDistancesWrite;

Texture2D<float4> obstaclesRead;
Texture2D<float4> velocityRead;
Texture2D<float4> altitudeRead;
Texture2D<float4> _ResourceGridRead;

Texture2D<float4> _SpawnDensityMap;  // spiritBrush?
uniform float _SpiritBrushPosNeg;
uniform float _IsBrushing;

uniform float _Time;
uniform float _MapSize;

uniform float _MinParticleSize;
uniform float _MaxParticleSize;
uniform float _ParticleNutrientDensity;

uniform float _FoodParticleRegrowthRate;

uniform float _MouseCoordX;
uniform float _MouseCoordY;

uniform int _SelectedParticleID;
uniform int _ClosestParticleID;

uniform float4 _FoodSprinklePos;
uniform float _FoodSprinkleRadius;

uniform float _GlobalNutrients;
uniform float _SolarEnergy;

uniform float _AlgaeGrowthNutrientsMask;
uniform float _AlgaeBaseGrowthRate;
uniform float _AlgaeGrowthNutrientUsage;
uniform float _AlgaeGrowthOxygenProduction;
uniform float _AlgaeAgingRate;
uniform float _AlgaeDecayRate;
uniform float _AlgaeSpawnMaxAltitude;
uniform float _AlgaeParticleInitMass;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;
SamplerState _PointClamp;
SamplerState _PointRepeat;

float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

[numthreads(32,1,1)]
void CSNewMeasureDistancesInit (uint3 id : SV_DispatchThreadID)
{	
	
	int critterIndex = id.y;
	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	float closestParticleIndex = 0;
	float minSquaredDistance = 100000;
	
	for(int i = 0; i < 32; i++) {
		int particleIndex = id.x * 32 + i;
		PlantParticleData particleData = foodParticlesRead[particleIndex];
	
		float mouthRadius = critterInitData.boundingBoxSize.x * critterSimData.growthPercentage; // **** REMEMBER TO *0.5 EVENTUALLY FOR ACCURATE SIZE
		float2 mouthCenterPos = critterSimData.heading * critterInitData.boundingBoxSize.y * 0.5 * critterSimData.growthPercentage;

		float2 particleToCritter = critterSimData.worldPos.xy + mouthCenterPos * 1.0 - particleData.worldPos.xy;

		float distanceSquared = particleToCritter.x * particleToCritter.x + particleToCritter.y * particleToCritter.y;
		if(particleData.isActive > 0.5) {
			if(distanceSquared < minSquaredDistance) {
			
				minSquaredDistance = distanceSquared;
				closestParticleIndex = particleIndex;
			}				
		}
	}	

	_CritterToPlantDistancesRT[int2(id.x, critterIndex)] = float4(closestParticleIndex, minSquaredDistance, foodParticlesRead[closestParticleIndex].worldPos.xy);
}

[numthreads(1,1,1)]
void CSNewMeasureDistancesMainA (uint3 id : SV_DispatchThreadID)
{	
	int critterIndex = id.y;
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];
			
	float closestParticleIndex = 0;
	float minSquaredDistance = 100000;
		
	for(int i = 0; i < 32; i++) {
		
		int particleIndex = id.x * 32 + i;
		
		float4 sourceData = _CritterToPlantDistancesRT[int2(i, critterIndex)];
		
		PlantParticleData particleData = foodParticlesRead[particleIndex];

		if(sourceData.y < minSquaredDistance) {
			if(particleData.isActive > 0.5) {
				minSquaredDistance = sourceData.y;
				closestParticleIndex = sourceData.x;
			}				
		}
	}
		
	PlantParticleData closestPlantData = foodParticlesRead[closestParticleIndex];	
	
	closestParticlesDataCBuffer[critterIndex] = closestPlantData;
	_ClosestPlantIndexCBuffer[id.y] = float4(closestParticleIndex, minSquaredDistance, closestPlantData.worldPos.xy);
}


[numthreads(32,1,1)]
void CSMeasureInitCursorDistances (uint3 id : SV_DispatchThreadID)
{
	
	int particleIndex = id.x;	

	PlantParticleData particleData = foodParticlesRead[particleIndex];
	
	float2 cursorWorldPos = float2(_MouseCoordX, _MouseCoordY);
	
	float2 particleToCursor = cursorWorldPos - particleData.worldPos.xy;

	float distanceSquared = particleToCursor.x * particleToCursor.x + particleToCursor.y * particleToCursor.y;
	
	cursorDistancesWrite[particleIndex] = float4(particleIndex, distanceSquared, particleData.worldPos.xy);			
}

[numthreads(1,1,1)]
void CSFetchParticleByID (uint3 id : SV_DispatchThreadID)
{
	PlantParticleData selectedParticleData = foodParticlesRead[_SelectedParticleID];
	PlantParticleData closestParticleData = foodParticlesRead[_ClosestParticleID];
	
	selectedPlantParticleDataCBuffer[0] = selectedParticleData;
	selectedPlantParticleDataCBuffer[1] = closestParticleData;
}


[numthreads(1,1,1)]
void CSEatSelectedFoodParticles (uint3 id : SV_DispatchThreadID)
{	
	// Check distance to nearest particle
	int critterIndex = id.x;

	float4 data = _CritterToPlantDistancesRead[critterIndex];

	int particleIndex = (int)data.x;

	PlantParticleData particleData = foodParticlesRead[particleIndex];
	
	foodParticlesWrite[particleIndex] = particleData;

	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	float eatenAmount = 0.0;

	float isAlive01 = saturate((critterSimData.embryoPercentage - 0.99) * 10000) * saturate(((1.0 - critterSimData.decayPercentage) - 0.99) * 10000);

	float distanceSquared = data.y;
	float mouthRadius = 1.0;     //critterInitData.boundingBoxSize.x * critterSimData.growthPercentage;  // **** REMEMBER TO *0.5 EVENTUALLY FOR ACCURATE SIZE
	float particleRadius = particleData.radius;
	float combinedRadius = (mouthRadius + particleRadius * 0.5) * isAlive01 * critterSimData.consumeOn;
	float mass = critterSimData.currentBiomass;

	/*
	if(distanceSquared < combinedRadius * combinedRadius) {	
		
		if(critterSimData.consumeOn > 0.5) {   // revisit
			eatenAmount = mass * 0.0085; // mouthRadius * mouthRadius * 0.025; // * critterInitData.eatEfficiencyPlant * 0.05f;		
			
			foodParticlesWrite[particleIndex].biomass = particleData.biomass - eatenAmount;
			
				
			if(foodParticlesWrite[particleIndex].biomass <= 0) {
				foodParticlesWrite[particleIndex].isActive = 0;
				foodParticlesWrite[particleIndex].isSwallowed = 1.0;
				foodParticlesWrite[particleIndex].critterIndex = critterIndex;				
			}
		}	
	}
	*/
	foodParticlesEatAmountsCBuffer[id.x] = eatenAmount;
}

[numthreads(1024,1,1)]
void CSCopyFoodParticlesBuffer (uint3 id : SV_DispatchThreadID)
{	
	PlantParticleData particleData = foodParticlesRead[id.x];
	
	foodParticlesWrite[id.x] = particleData;
}

[numthreads(1,1,1)]
void CSMeasureTotalFoodParticlesAmount (uint3 id : SV_DispatchThreadID)
{	
	PlantParticleData copyData = foodParticlesRead[id.x];
	
	float totalBiomassAmount = 0;
	float totalOxygenProduced = 0.0;
	float totalWasteProduced = 0.0;
	float totalNutrientsUsed = 0.0;
	
	for(int i = 0; i < 32; i++) {		
		int particleIndex = id.x * 32 + i;		
		PlantParticleData particleData = foodParticlesRead[particleIndex];				
		
		totalBiomassAmount += particleData.biomass;
		totalOxygenProduced += particleData.oxygenProduced;
		totalWasteProduced += particleData.wasteProduced;
		totalNutrientsUsed += particleData.nutrientsUsed;
	}

	copyData.biomass = totalBiomassAmount;
	copyData.oxygenProduced = totalOxygenProduced;
	copyData.wasteProduced = totalWasteProduced;
	copyData.nutrientsUsed = totalNutrientsUsed;
	
	foodParticlesWrite[id.x] = copyData;
}

[numthreads(1,1,1)]
void CSSpawnInitialAlgaeParticles (uint3 id : SV_DispatchThreadID)
{
	float rand01 = rand(float2(_Time * 135.79 + (float)foodParticlesRead[id.x].index * 30.17896, _Time * 28.463));
	float randX = rand(float2((float)id.x, _Time));
	float randY = rand(float2(randX * 62.39 + _Time, (float)id.x));

	foodParticlesWrite[0].worldPos = _FoodSprinklePos.xy + float2(randX, randY) * _FoodSprinkleRadius;

	float randRadius = rand(float2(randX * 10, randY * -3.37)) * (_MaxParticleSize - _MinParticleSize) + _MinParticleSize;					
					
	foodParticlesWrite[id.x].radius = 1.0; //randRadius;
	foodParticlesWrite[id.x].biomass = 0.1; //_AlgaeParticleInitMass;
	foodParticlesWrite[id.x].isActive = 1.0;
	foodParticlesWrite[id.x].isDecaying = 0.0;
	foodParticlesWrite[id.x].isSwallowed = 0.0;
	foodParticlesWrite[id.x].digestedAmount = 0.0;
	foodParticlesWrite[id.x].age = rand(float2(rand01 * 70.158, randX * 13.37)) * 0.5;
	foodParticlesWrite[id.x].colorA = float3(randY, randX, rand01);
}

[numthreads(1024,1,1)]
void CSSimulateAlgaeParticles (uint3 id : SV_DispatchThreadID)
{
	// Check if particle isn't in the water:

	PlantParticleData foodParticle = foodParticlesRead[id.x];
	
	if(foodParticle.isActive > 0.5) { // poor man's boolean -- Being Simulated
		
		float2 uv = foodParticle.worldPos / _MapSize;
		
		float4 altitudeTexSample = altitudeRead.SampleLevel(_LinearClamp, uv, 0);
		float altitudeRaw = altitudeTexSample.x;

		float2 posOffset = float2(0,0);

		float bodyMass = foodParticle.biomass;
		float wasteMass = 0;
		float oxygenProduced = 0;
		float nutrientsUsed = 0;

		float2 vel = velocityRead.SampleLevel(_LinearClamp, uv, 0).xy;
		float speedMult = 0.0167; // * (1.0 - foodParticle.rootedness);				
		
		posOffset += vel * speedMult * _MapSize;

		
		/*int neighborIndex = (id.x + round(_Time * 11) + 512) % 1024;
			
		PlantParticleData neighborParticle = foodParticlesRead[neighborIndex];
		float neighborAliveMask = neighborParticle.isActive; //    (1.0 - neighborParticle.isDecaying) * neighborParticle.isActive;

		float2 neighborPos = neighborParticle.worldPos;
		float2 dirToNeighbor = neighborPos - foodParticle.worldPos;
		float distToNeighborSquared = dirToNeighbor.x * dirToNeighbor.x + dirToNeighbor.y * dirToNeighbor.y;		
			
		float repelMaskRange = 0.004;
		float repelMaskOffset = 0.0;
		float repelDistanceMask = 1.0 - saturate(distToNeighborSquared * repelMaskRange - repelMaskOffset);
		float2 repelVel = -dirToNeighbor * repelDistanceMask * neighborAliveMask;
		float repelMag = 0.005;
		posOffset += repelVel * repelMag;
		*/		

		if(foodParticle.isDecaying < 0.5) {  // ALIVE !!!!!
		
			// Growth: // sample nutrients & light?
			float4 resourceGridSample = _ResourceGridRead.SampleLevel(_PointClamp, uv, 0); 
			float nutrientsGrowthMask = saturate(resourceGridSample.x * _AlgaeGrowthNutrientsMask);
			float lightGrowthMask = 1; // saturate(((1.0 - altitudeRaw) - 0.5) * 40);
			
			float growthMass = _AlgaeBaseGrowthRate * nutrientsGrowthMask * lightGrowthMask * _SolarEnergy;

			nutrientsUsed = growthMass * _AlgaeGrowthNutrientUsage;
			oxygenProduced = (growthMass + bodyMass * 0.00035) * _AlgaeGrowthOxygenProduction;

			bodyMass += growthMass;

			float onLandMask = saturate((altitudeRaw - 0.5) * 100);
			float rightClickMask01 = saturate(_SpiritBrushPosNeg * -1);
			float4 spiritBrushTex = _SpawnDensityMap.SampleLevel(_LinearClamp, uv, 0);  // brush mask
			foodParticlesWrite[id.x].age = foodParticle.age + _AlgaeAgingRate + spiritBrushTex.x * rightClickMask01 * 0.2 * _IsBrushing + onLandMask * 0.01; 
			
			foodParticlesWrite[id.x].isDecaying = foodParticle.isDecaying;

			if(foodParticle.age > 2.0) {  // Dies of old age:
				foodParticlesWrite[id.x].isDecaying = 1.0;
			}
		}
		else {  // DEAD !!!!!
			
			float decayEfficiency = 1;
			float decayRate = _AlgaeDecayRate;
			float decayMass = decayRate * decayEfficiency;
						
			bodyMass -= decayMass;
			float tempWasteProducedMult = 0.33;
			wasteMass += decayMass * tempWasteProducedMult;
			
			// if is fully decayed:
			if(bodyMass <= 0.0) {  // fully decayed:
				foodParticlesWrite[id.x].isActive = 0.0;
				foodParticlesWrite[id.x].isDecaying = 0.0;
				bodyMass = 0;
			}
		}
		float2 newWorldPos = foodParticle.worldPos + posOffset;
		newWorldPos.x = min(max(newWorldPos.x, 0), _MapSize);   // CAP BOUNDARIES
		newWorldPos.y = min(max(newWorldPos.y, 0), _MapSize);   // CAP BOUNDARIES
		foodParticlesWrite[id.x].worldPos = newWorldPos; // foodParticle.worldPos + posOffset;
		foodParticlesWrite[id.x].biomass = bodyMass;
		foodParticlesWrite[id.x].wasteProduced = wasteMass;
		foodParticlesWrite[id.x].oxygenProduced = oxygenProduced;
		foodParticlesWrite[id.x].nutrientsUsed = nutrientsUsed;
	}
	else {  // INACTIVE:::
		
		foodParticlesWrite[id.x].biomass = 0;
		foodParticlesWrite[id.x].oxygenProduced = 0;
		foodParticlesWrite[id.x].wasteProduced = 0;
		foodParticlesWrite[id.x].nutrientsUsed = 0;

		float isRightClick = saturate(_SpiritBrushPosNeg * -1.0) * _IsBrushing;
		float isLeftClick = saturate(_SpiritBrushPosNeg) * _IsBrushing;
		if(_IsBrushing * isLeftClick > 0.5) {	 // player brushing this

			float rand01 = rand(float2(_Time * 135.79 + (float)foodParticlesRead[id.x].index * 30.17896, _Time * 28.463));
			float randX = rand(float2((float)id.x, _Time));
			float randY = rand(float2(randX * 62.39 + _Time, (float)id.x));
			float randZ = rand(float2((float)id.x, randY * -62.39 - _Time));			
			
			int parentIndex = (id.x + round(_Time * 0.25) + 256) % 1024;			
			PlantParticleData parentParticle = foodParticlesRead[parentIndex];
			float aliveMask = (1.0 - parentParticle.isDecaying) * parentParticle.isActive;
			float2 parentPos = parentParticle.worldPos;

			float2 spawnUV = float2(randZ, randX); 	
						
			//float4 spawnAltitudeSample = altitudeRead.SampleLevel(_LinearClamp, spawnUV, 0);
			
			//float distToOrigin = length(_FoodSprinklePos.xy - (spawnUV * _MapSize));
			
			//  SPIRIT BRUSH MASK:
			float4 brushMaskTex = _SpawnDensityMap.SampleLevel(_LinearClamp, spawnUV, 0);			
			float brushMask = saturate(brushMaskTex.x * 1.33);
			
			//if(distToOrigin < _FoodSprinkleRadius * rand01 * rand01) { 	// to prevent mass respawning, overshooting the intended max global food amount ?  // Needed?		
			if(brushMask * (1.0 - isRightClick) > 0.5) {  
				//if(spawnAltitudeSample.x < _AlgaeSpawnMaxAltitude) {  // in water only? // for now...
				
				foodParticlesWrite[id.x].worldPos = spawnUV * _MapSize;
					
				PlantParticleData representativeParticle = _RepresentativeAlgaeParticleGenomeCBuffer[0];
					

				float randRadius = rand(float2(randX * 10, randY * -3.37)) * (_MaxParticleSize - _MinParticleSize) + _MinParticleSize;					
					
				foodParticlesWrite[id.x].radius = 1.0; // representativeParticle.radius * (0.9 + 0.2 * (1.0 - rand01)); // 1.0; //randRadius;
				foodParticlesWrite[id.x].biomass = _AlgaeParticleInitMass * 10;
				foodParticlesWrite[id.x].isActive = 1.0;
				foodParticlesWrite[id.x].isDecaying = 0.0;
				foodParticlesWrite[id.x].isSwallowed = 0.0;
				foodParticlesWrite[id.x].digestedAmount = 0.0;
				foodParticlesWrite[id.x].age = rand(float2(rand01 * 70.158, randX * 13.37)) * 1;
				float mutationSize = 0.1;
				foodParticlesWrite[id.x].colorA = representativeParticle.colorA; 
					
				foodParticlesWrite[id.x].colorB = representativeParticle.colorB; 
				foodParticlesWrite[id.x].health = 1.0;
				foodParticlesWrite[id.x].typeID = representativeParticle.typeID;
				foodParticlesWrite[id.x].rootedness = representativeParticle.rootedness;
				foodParticlesWrite[id.x].radiusAxisOne = representativeParticle.radiusAxisOne;
				foodParticlesWrite[id.x].radiusAxisTwo = representativeParticle.radiusAxisTwo;
				foodParticlesWrite[id.x].leafDensity = representativeParticle.leafDensity;
				foodParticlesWrite[id.x].angleInc = representativeParticle.angleInc;
				foodParticlesWrite[id.x].leafLength = representativeParticle.leafLength;
				foodParticlesWrite[id.x].leafWidth = representativeParticle.leafWidth;
				foodParticlesWrite[id.x].leafRoundness = representativeParticle.leafRoundness;
				foodParticlesWrite[id.x].brushTypeX = representativeParticle.brushTypeX;

				// lerp(representativeParticle.color, float3(1.0 - randZ, rand01, randY), mutationSize);
				//foodParticlesWrite[id.x].color = representativeParticle.color; // float3(1,1,1); // float3(randY, randX, randZ); //float3(0,0,0); //saturate(parentParticle.color + (float3(randY, randX, randZ) - 0.5) * 0.1);
				//}			
			}			
		}
		else {  // Player NOT brushing
			float rand01 = rand(float2(_Time * 135.79 + (float)foodParticlesRead[id.x].index * 30.17896, _Time * 28.463));
			float randX = rand(float2((float)id.x, _Time * rand01));
			float randY = rand(float2(randX * 62.39 + _Time, (float)id.x));
			float randZ = rand(float2((float)id.x, randY * -62.39 - _Time));			
			
			int parentIndex = (id.x * 13 + round(_Time * 1.25) + 256) % 1024;			
			PlantParticleData parentParticle = foodParticlesRead[parentIndex];
			float aliveMask = (1.0 - parentParticle.isDecaying) * parentParticle.isActive;
			float2 parentPos = parentParticle.worldPos;

			float2 spawnUV = (parentPos + (float2(randZ, randX) - 0.5) * 33) / _MapSize;  //lerp(float2(randZ, randX), parentPos / _MapSize, 0.95); 	
						
			//float4 spawnAltitudeSample = altitudeRead.SampleLevel(_LinearClamp, spawnUV, 0);
			 
			if(parentParticle.biomass > 0.0001 && rand01 > 0.99) {  // in water only? // for now...
				
				foodParticlesWrite[id.x].worldPos = spawnUV * _MapSize;
					

				//float randRadius = rand(float2(randX * 10, randY * -3.37)) * (_MaxParticleSize - _MinParticleSize) + _MinParticleSize;					
					
				foodParticlesWrite[id.x].radius = 1.0; //parentParticle.radius * (0.9 + 0.2 * (1.0 - rand01));  // ** UNUSED?*** // parentParticle.radius; // 1.0; //randRadius;
				foodParticlesWrite[id.x].biomass = _AlgaeParticleInitMass * 5;
				foodParticlesWrite[id.x].isActive = 1.0;
				foodParticlesWrite[id.x].isDecaying = 0.0;
				foodParticlesWrite[id.x].isSwallowed = 0.0;
				foodParticlesWrite[id.x].digestedAmount = 0.0;
				foodParticlesWrite[id.x].age = rand(float2(rand01 * 70.158, randX * 13.37)) * 1;
				float mutationSize = 0.001;
				foodParticlesWrite[id.x].colorA = lerp(parentParticle.colorA, float3(saturate(1.0 - randZ), frac(rand01 + randZ), saturate(randY)), mutationSize);

				foodParticlesWrite[id.x].colorB = parentParticle.colorB; 
				foodParticlesWrite[id.x].health = 1.0;
				foodParticlesWrite[id.x].typeID = parentParticle.typeID;
				foodParticlesWrite[id.x].rootedness = lerp(parentParticle.rootedness, frac(randZ * -33.27), mutationSize);
				foodParticlesWrite[id.x].radiusAxisOne = lerp(parentParticle.radiusAxisOne, frac(randY * 2187.6541), mutationSize);
				foodParticlesWrite[id.x].radiusAxisTwo = lerp(parentParticle.radiusAxisTwo, frac(rand01 * -44599.23), mutationSize);
				foodParticlesWrite[id.x].leafDensity = lerp(parentParticle.leafDensity, frac(randZ * -132.114), mutationSize);
				foodParticlesWrite[id.x].angleInc = lerp(parentParticle.angleInc, frac(randY + rand01 * 19.459), mutationSize);
				foodParticlesWrite[id.x].leafLength = lerp(parentParticle.leafLength, frac(-randZ * 984.221), mutationSize);
				foodParticlesWrite[id.x].leafWidth = lerp(parentParticle.leafWidth, frac(rand01 * 1238.7), mutationSize);
				foodParticlesWrite[id.x].leafRoundness = lerp(parentParticle.leafRoundness, frac(randY * 1289.243), mutationSize);
				foodParticlesWrite[id.x].brushTypeX = lerp(parentParticle.brushTypeX, randY, 0);
			}			
					
		}
	}
}

/*
[numthreads(1024,1,1)]
void CSMeasureInitCritterDistances (uint3 id : SV_DispatchThreadID)
{	
	int particleIndex = id.x;
	int critterIndex = id.y;

	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	
	
	PlantParticleData particleData = foodParticlesRead[particleIndex];

	//float mouthRadius = critterInitData.boundingBoxSize.x * critterSimData.growthPercentage; // **** REMEMBER TO *0.5 EVENTUALLY FOR ACCURATE SIZE
	float2 mouthCenterPos = critterSimData.heading * critterInitData.boundingBoxSize.y * 0.5 * critterSimData.growthPercentage;
	

	float2 particleToCritter = critterSimData.worldPos.xy - particleData.worldPos; // + mouthCenterPos * 1.0;

	float distanceSquared = particleToCritter.x * particleToCritter.x + particleToCritter.y * particleToCritter.y;
		
	
	foodParticlesNearestCrittersRT[int2(particleIndex, critterIndex)] = float4(particleData.index, distanceSquared, particleData.worldPos);
		
}*/

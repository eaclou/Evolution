// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel CSSimSurfaceBitsData
#pragma kernel CSSimDetailBitsData
#pragma kernel CSSimWaterQuadsData
#pragma kernel CSSimWaterCurvesData
#pragma kernel CSPinWaterChainsData
#pragma kernel CSShiftWaterChainsData
#pragma kernel CSSwapWaterChainsData
#pragma kernel CSUpdateWaterSurface
#pragma kernel CSCalculateWaterSurfaceNormals

struct TrailDotData {
    int parentIndex;
    float2 coords01;
    float age;
	float initAlpha;
};

struct WaterQuadData {
	int index;
	float3 worldPos;
	float2 heading;
	float2 localScale;
	float age;
	float speed;
	int brushType;
};

struct WaterCurveData {   // 2 ints, 17 floats
    int index;    
    float2 p0;
    float2 p1;
    float2 p2;
    float2 p3;
    float4 widths;
	float3 hue;
    float strength;   // extra data to use however
	float age;  // to allow for fade-in and fade-out
    int brushType;  // brush texture mask
};

#include "Assets/Resources/Shaders/Inc/StructsCritterData.cginc"
#include "Assets/Resources/Shaders/Inc/NoiseShared.cginc"


Texture2D<float4> InputVelocityTex;
Texture2D<float4> VelocityRead;
Texture2D<float4> AltitudeRead;
Texture2D<float4> PressureRead;

//Texture2D<float4> ObstaclesRead;

RWStructuredBuffer<WaterQuadData> waterQuadStrokesCBuffer;
RWStructuredBuffer<WaterCurveData> waterCurveStrokesCBuffer;

RWStructuredBuffer<float2> waterChainsReadCBuffer;
RWStructuredBuffer<float2> waterChainsWriteCBuffer;

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;

RWStructuredBuffer<float4> outputValuesCBuffer;
StructuredBuffer<float4> addNutrientsCBuffer;
Texture2D<float4> measureValuesTex;
RWTexture2D<float4> pooledResultTex;

Texture2D<float4> waterSurfaceDataReadRT;
RWTexture2D<float4> waterSurfaceDataWriteRT;

Texture2D<float4> _ResourceGridTex;
Texture2D<float4> _ResourceSimTransferTex;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;
SamplerState _PointClamp;
SamplerState _PointRepeat;

uniform float _TextureResolution;
uniform float _DeltaTime;
uniform float _InvGridScale;
uniform float _MapSize;

uniform float _Time;

uniform float _SampleCoordX;
uniform float _SampleCoordY;

uniform float _VelocitySampleRadius;

uniform const float _VelConversionConst = 0.033;

uniform float4 _PlayerPos;

uniform float _CamDistNormalized;
uniform float4 _SpawnBoundsCameraDetails;

uniform float4 _CursorClickWorldPos;
uniform float _CursorClickTimeLerp; // 0-1
uniform float _CursorClickWaveOn;

uniform int _BufferLength;


float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

[numthreads(1024,1,1)]
void CSSimSurfaceBitsData (uint3 id : SV_DispatchThreadID)
{	
	
	WaterQuadData waterQuadData = waterQuadStrokesCBuffer[id.x];

	// ***** Move Head Point0: //

	float2 uv = waterQuadData.worldPos.xy / _MapSize;
	//float2 altitudeUV = uv * 0.5 + 0.25;
	float2 vel = VelocityRead.SampleLevel(_LinearClamp, uv, 0).xy;
	float speedMult = 0.0015;

	waterQuadData.speed = length(vel);
	
	float2 nextPos = uv + vel * speedMult;

	float altitude = AltitudeRead.SampleLevel(_LinearClamp, uv, 0).x;

	waterQuadData.age = waterQuadData.age + 0.0025;  // ? frame lifespan
	if(waterQuadData.age > 1.0 || altitude > 0.45 ) {
		
		float2 spawnPos = float2(rand(float2(id.x, uv.x + _Time)), rand(float2(uv.y - _Time, id.x + _Time * 8.913)));		
		float2 spawnBoxSize = float2(_SpawnBoundsCameraDetails.z - _SpawnBoundsCameraDetails.x, _SpawnBoundsCameraDetails.w - _SpawnBoundsCameraDetails.y);
		spawnPos = spawnPos * spawnBoxSize + _SpawnBoundsCameraDetails.xy;

		// check potential spawn location:
		float2 spawnUV = spawnPos / _MapSize;
		float spawnAltitude = AltitudeRead.SampleLevel(_LinearClamp, spawnUV, 0).x;
		float spawnNoise1 = saturate(Value2D(spawnPos + 5, 0.055).x * 16);
		float spawnNoise2 = saturate(Value2D(spawnPos - 33, 0.15).x * 9.5);
		float spawnNoise3 = saturate(Value2D(spawnPos + 349.7, 0.4579).x * 4.5);
		float altitudeMask = (1.0 - saturate(-1.0 * (spawnAltitude * 2.0 - 1.0)));
		float spawnRating = spawnNoise1 * spawnNoise2 * spawnNoise3 * altitudeMask * altitudeMask; // * spawnNoise * spawnNoise * altitudeMask * altitudeMask;
		
		if(spawnRating > (float)id.x / 1024.0 / 16.0) {
			waterQuadData.worldPos = float3(spawnPos, 0);
			waterQuadData.age -= 1;
		}
		else {
		
		}
		
	}
	else {
		waterQuadData.worldPos = float3(nextPos * _MapSize, 0);
		
	}

	float2 forwardDir = normalize(vel);
	
	
	waterQuadStrokesCBuffer[id.x] = waterQuadData;
	
}

[numthreads(1024,1,1)]
void CSSimDetailBitsData (uint3 id : SV_DispatchThreadID)
{	
	
	WaterQuadData waterQuadData = waterQuadStrokesCBuffer[id.x];

	// ***** Move Head Point0: //

	float2 uv = waterQuadData.worldPos.xy / _MapSize;
	
	float2 vel = VelocityRead.SampleLevel(_LinearClamp, uv, 0).xy;
	float speedMult = 0.0167;

	waterQuadData.speed = length(vel);
	
	float2 nextPos = uv + vel * speedMult;

	float altitude = AltitudeRead.SampleLevel(_LinearClamp, uv, 0).x;

	waterQuadData.age = waterQuadData.age + 0.005;  // ? frame lifespan
		
	float respawnFromAge = saturate((waterQuadData.age - 1.0) * 1000); // 0 = fine, 1 == TOO OLD!!!
	float respawnFromAltitude = saturate((altitude - 0.5) * 100);  // 0 if in water, 1 if on land
	float respawnMask = respawnFromAge; // + respawnFromAltitude;  // equivalent to OR
		
	//respawnMask *= saturate(nutrients * 1);

	// **** Resource Grid TEX!
	if(respawnMask > 0.5 ) {
		
		// Respawn!!!

				
		//float2 spawnBoxSize = float2(_SpawnBoundsCameraDetails.z - _SpawnBoundsCameraDetails.x, _SpawnBoundsCameraDetails.w - _SpawnBoundsCameraDetails.y);
		//spawnPos = spawnPos * spawnBoxSize + _SpawnBoundsCameraDetails.xy;
		
		for(int i = 0; i < 4; i++) {
			float2 spawnPos = float2(rand(float2(id.x + i * 1.3337, uv.x - i - _Time)), rand(float2(uv.y - i + _Time, id.x + i) * 31.987634));		
			float2 spawnUV = spawnPos; // / _MapSize;
			float4 resourceGridTex = _ResourceGridTex.SampleLevel(_LinearClamp, spawnUV, 0);
			float nutrients = saturate(resourceGridTex.x * 5);
			float extraMask = saturate(resourceGridTex.y * 25) * saturate((resourceGridTex.z - 0.1) * 50);
			float spawnMask = nutrients * 0 + extraMask;

			if(spawnMask > 0.05) {
				waterQuadData.worldPos = float3(spawnPos * _MapSize, 0);
				waterQuadData.age = frac(waterQuadData.age);

				break;
			}
		
		}
		
		
		
	}
	else {
		waterQuadData.worldPos = float3(nextPos * _MapSize, 0);
		
	}

	float2 forwardDir = normalize(vel);
	
	
	waterQuadStrokesCBuffer[id.x] = waterQuadData;
	
}

[numthreads(1024,1,1)]
void CSSimWaterQuadsData (uint3 id : SV_DispatchThreadID)
{	
	
	WaterQuadData waterQuadData = waterQuadStrokesCBuffer[id.x];

	// ***** Move Head Point0: //

	float2 uv = waterQuadData.worldPos.xy / _MapSize;
	
	float2 vel = VelocityRead.SampleLevel(_LinearClamp, uv, 0).xy;
	float speedMult = 0.015;

	waterQuadData.speed = length(vel);
	
	float2 nextPos = uv + vel * speedMult;

	float altitude = AltitudeRead.SampleLevel(_LinearClamp, uv, 0).x;

	
	if(waterQuadData.age > 1.0 || altitude > 0.45) {
		
		float2 spawnPos = float2(rand(float2(id.x, uv.x + _Time)), rand(float2(uv.y - _Time, id.x + _Time * 8.913)));		
		float2 spawnBoxSize = float2(_SpawnBoundsCameraDetails.z - _SpawnBoundsCameraDetails.x, _SpawnBoundsCameraDetails.w - _SpawnBoundsCameraDetails.y);
		spawnPos = spawnPos * spawnBoxSize + _SpawnBoundsCameraDetails.xy;

		// check potential spawn location:
		float2 spawnUV = spawnPos / _MapSize;
		float spawnAltitude = AltitudeRead.SampleLevel(_LinearClamp, spawnUV, 0).x;
		float spawnNoise1 = saturate(Value2D(spawnPos + 5, 0.055).x * 10);
		float spawnNoise2 = saturate(Value2D(spawnPos - 33, 0.15).x * 6.5);
		float spawnNoise3 = saturate(Value2D(spawnPos + 349.7, 0.4579).x * 2.5);
		float altitudeMask = (1.0 - saturate(-1.0 * (spawnAltitude * 2.0 - 1.0)));
		float spawnRating = 1.0; //spawnNoise1 * spawnNoise2 * spawnNoise3 * altitudeMask; // * spawnNoise * spawnNoise * altitudeMask * altitudeMask;

		if(spawnRating > (float)id.x / (float)_BufferLength) {
			waterQuadData.worldPos = float3(spawnPos, 0);
			waterQuadData.age = 0.0;
		}
	}
	else {
		waterQuadData.worldPos = float3(nextPos * _MapSize, 0);
		
		waterQuadData.age = waterQuadData.age + 0.0035;
	}

	float2 forwardDir = normalize(vel);
	
	
	waterQuadStrokesCBuffer[id.x] = waterQuadData;
	
}

[numthreads(1024,1,1)]
void CSSimWaterCurvesData (uint3 id : SV_DispatchThreadID)
{	
	WaterCurveData waterCurveData = waterCurveStrokesCBuffer[id.x];

	// ***** Move Head Point0: //

	float2 uv = waterCurveData.p0 / _MapSize;
	
	float2 vel = VelocityRead.SampleLevel(_LinearClamp, uv, 0).xy;
	float speedMult = 0.085;
	
	float2 nextPos = uv + vel * speedMult;

	float altitude = AltitudeRead.SampleLevel(_LinearClamp, uv, 0).x;

	waterCurveData.age = waterCurveData.age + 0.001;  // 1000 frame lifespan
	if(waterCurveData.age > 1.0 || altitude > 0.5 ) {
		
		float2 spawnPos = float2(rand(float2(id.x, uv.x)), rand(float2(uv.y, id.x)));		
		waterCurveData.p0 = spawnPos * _MapSize;
		waterCurveData.p1 = waterCurveData.p0 - float2(0, -1);
		waterCurveData.p2 = waterCurveData.p1 - float2(0, -2);
		waterCurveData.p3 = waterCurveData.p2 - float2(0, -3);
		waterCurveData.age -= 1;

		float2 sampleUV = waterCurveData.p0 / _MapSize;
		
		waterCurveData.hue = float3(1,1,1); //fluidDensityColor;
	}
	else {
		waterCurveData.p0 = nextPos * _MapSize;

		//float3 fluidDensityColor = DensityRead.SampleLevel(_LinearRepeat, uv, 0).xyz;
		waterCurveData.hue = float3(1,1,1); //lerp(waterCurveData.hue, fluidDensityColor, 0.02);
	}

	float2 forwardDir = normalize(vel);	

	float restDistance = 2.0;
	float lerpStrength = 0.054;

	float2 p0 = waterCurveData.p0;
	
	float2 p1 = waterCurveData.p1;
	float2 targetPos1 = p0 - forwardDir * restDistance;
	//float2 vec0to1 = p1 - p0; // after p0 has been moved, vector from old P1 to new P0
	p1 = lerp(p1, targetPos1, lerpStrength * 1);
	//p1 = lerp(p1, p0 + normalize(vec0to1) * restDistance, lerpStrength * 1);

	float2 p2 = waterCurveData.p2;
	float2 targetPos2 = p1 - forwardDir * restDistance;
	//float2 vec1to2 = p2 - p1;
	p2 = lerp(p2, targetPos2, lerpStrength * 1);
	//p2 = lerp(p2, p1 + normalize(vec1to2) * restDistance, lerpStrength * 1);

	float2 p3 = waterCurveData.p3;
	float2 targetPos3 = p2 - forwardDir * restDistance;
	//float2 vec2to3 = p3 - p2;
	p3 = lerp(p3, targetPos3, lerpStrength * 1);
	//p3 = lerp(p3, p2 + normalize(vec2to3) * restDistance, lerpStrength * 1);

	waterCurveData.p0 = p0;
	waterCurveData.p1 = p1;
	waterCurveData.p2 = p2;
	waterCurveData.p3 = p3;
	
	waterCurveStrokesCBuffer[id.x] = waterCurveData;
}








// CHAINS::::

[numthreads(1024,1,1)]
void CSPinWaterChainsData (uint3 id : SV_DispatchThreadID)
{	
	int rootIndex = id.x * 16; // hardcoded 16 !!!!! ***********************
	float2 waterChainData = waterChainsReadCBuffer[rootIndex];
	
	float2 uv = waterChainData / _MapSize;
	
	float speedMult = 0.033;
	
	// blah blah 

	float2 fluidVel = VelocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	
	float2 nextCoords = uv + fluidVel * speedMult;
	
	waterChainsWriteCBuffer[rootIndex] = nextCoords * _MapSize;
}

[numthreads(1024,1,1)]
void CSShiftWaterChainsData (uint3 id : SV_DispatchThreadID)
{	
	uint pointIndex = id.x;
	uint localIndex = pointIndex % 16;  // **** HARDCODED!!!! ****

	uint waterChainIndex = floor(id.x / 16);   // **** HARDCODED!!!! ****

	float minDist = 0.1;

	if(localIndex != 0) {  // don't move head point
		float2 ownPos = waterChainsReadCBuffer[pointIndex]; // try to avoid divide by 0
		float2 nextPos = waterChainsReadCBuffer[pointIndex - 1]; // get neighbor's position
						
		float2 vecToNext = nextPos - ownPos;
		float distToNext = length(vecToNext);
		
		if(distToNext < minDist) {
					
		}
		else { // normal non-overlapping
			waterChainsWriteCBuffer[pointIndex] = lerp(ownPos, nextPos, 0.45);			
		}

		//newDist = max(minDist, distToNext);	
		//waterChainsWriteCBuffer[pointIndex] = lerp(ownPos, nextPos - dirToNext * newDist, 0.05);

		//waterChainsWriteCBuffer[pointIndex] = nextPos;
	}
}

[numthreads(1024,1,1)]
void CSSwapWaterChainsData (uint3 id : SV_DispatchThreadID)
{	
	waterChainsWriteCBuffer[id.x] = waterChainsReadCBuffer[id.x];
}


[numthreads(32,32,1)]
void CSUpdateWaterSurface (uint3 id : SV_DispatchThreadID)
{		
	float camDistNormalized = _CamDistNormalized;

	float distWeight0 = 1.0; // - saturate(2.0 * abs(1 - camDistNormalized));
	float distWeight1 = 1.0; // - saturate(2.0 * abs(0.67 - camDistNormalized));
	float distWeight2 = 1.0; // - saturate(2.0 * abs(0.33 - camDistNormalized));
	float distWeight3 = 1.0; // - saturate(2.0 * abs(0 - camDistNormalized));

	float timeScale = 0.325 * _Time;

	float4 noiseSample0 = Value3D((float3)id.xyz + float3(timeScale * 3.1, timeScale * 2.08,  timeScale * 26.81879 + (float)id.y * 1.36 + (float)id.x * 1.39), 0.06);
	float4 noiseSample1 = Value3D((float3)id.xyz + float3(-timeScale * 2.1, -timeScale * 0.68,  -timeScale * 1.221879 - (float)id.y * 0.92 - (float)id.x * 0.86), 0.17);
	float4 noiseSample2 = Value3D((float3)id.xyz * 1 + float3(timeScale * 0.301, -timeScale * 0.39, timeScale * 2.315 + (float)id.x * 1 - (float)id.y * 1.341), 1.05879);
	float4 noiseSample3 = Value3D((float3)id.xyz * 1 + float3(-timeScale * 0.1, -timeScale * 0.07, -timeScale * 2.3 + (float)id.x * 10 - (float)id.y * 7.8) * 1, 3.614);

	float noise0 = noiseSample0.x * 0.5 + 0.5;   // 0-1 range
	float noise1 = noiseSample1.x * 0.5 + 0.5;
	float noise2 = noiseSample2.x * 0.5 + 0.5;
	float noise3 = noiseSample3.x * 0.5 + 0.5;


	float height = (noise0) * 1.0 * distWeight0 + 
				
					(noise1) * 0.67 * distWeight1 + 
					(1.0 - abs(noiseSample2.x)) * 0.2 * distWeight2 + 
					(1.0 - abs(noiseSample3.x)) * 0.0 * distWeight3;

	// CLICK WAVE!!!
	float2 pixelWorldPos = (((float2)id.xy + 0.5) / (float)_TextureResolution) * _MapSize;
	float2 waveOrigin = _CursorClickWorldPos.xy;
	float distToOrigin = length(waveOrigin - pixelWorldPos);

	float falloffDist = 128;
	float peakDist = _CursorClickTimeLerp * falloffDist;
	float distMask = 1.0 - saturate(abs(distToOrigin - peakDist) * 0.1);
	float falloffMask = 1.0 - saturate(distToOrigin / falloffDist);
	float waveAmp = 0.55;
	
	float waveHeight = waveAmp * _CursorClickWaveOn * distMask * falloffMask; // sin(distToOrigin * waveFreq) * waveAmp * _CursorClickWaveOn * (1.0 - _CursorClickTimeLerp);
	
	// UNDER PRESSURE!!! (do do doo d d doo do)
	float2 uv = (((float2)id.xy + 0.5) / (float)_TextureResolution);
	float4 pressureSample = PressureRead.SampleLevel(_LinearClamp, uv, 0);
	
	waterSurfaceDataWriteRT[id.xy] = float4(height * 0.25 + waveHeight * 0.35 + pressureSample.x * 1.0, 0, 0, 1);
}

[numthreads(32,32,1)]
void CSCalculateWaterSurfaceNormals (uint3 id : SV_DispatchThreadID)
{	
	float4 curValue = waterSurfaceDataReadRT[id.xy];
		
	float heightCenter = curValue.x;

	uint2 upIndex = uint2(id.x, min(1023, id.y + 1));
	float heightUp = waterSurfaceDataReadRT[upIndex].x;
	uint2 rightIndex = uint2(min(1023, id.x + 1), id.y);
	float heightRight = waterSurfaceDataReadRT[rightIndex].x;
	uint2 downIndex = uint2(id.x, max(0, id.y - 1));
	float heightDown = waterSurfaceDataReadRT[downIndex].x;
	uint2 leftIndex = uint2(max(0, id.x - 1), id.y);
	float heightLeft = waterSurfaceDataReadRT[leftIndex].x;
		
	
	float2 grad = float2(heightRight - heightLeft, heightUp - heightDown);
	float zx = -grad.x;
	float zy = -grad.y;

	float heightScale = 1;
	grad *= heightScale;
	float z = sqrt(1.0 - (grad.x * grad.x) - (grad.y * grad.y));

	float3 normal = normalize(float3(-grad.x, -grad.y, -z));
	
	curValue.yzw = normal;
	
	waterSurfaceDataWriteRT[id.xy] = curValue; //float4(1,1,1,1); //curValue;
}
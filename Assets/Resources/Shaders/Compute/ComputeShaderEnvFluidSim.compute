// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RefreshColor
#pragma kernel InitializeVelocity
#pragma kernel Advection
#pragma kernel ViscousDiffusion
#pragma kernel VelocityInjectionPoints
#pragma kernel VelocityInjectionPointsVortex
#pragma kernel VelocityDivergence
#pragma kernel PressureJacobi
#pragma kernel SubtractGradient
#pragma kernel GetVelAtCoords
#pragma kernel GetObjectVelocities
#pragma kernel SimPlayerGlowyBits
#pragma kernel SimFloatyBits
#pragma kernel SimRipples
#pragma kernel SimTrailDots
#pragma kernel SimWaterSplines
#pragma kernel CSPinWaterChainsData
#pragma kernel CSShiftWaterChainsData
#pragma kernel CSSwapWaterChainsData


struct ForcePoint {
    float posX;
    float posY;        
    float velX;
    float velY;
    float size;
};

struct TrailDotData {
    int parentIndex;
    float2 coords01;
    float age;
	float initAlpha;
};

struct PlayerGlowyBitData {
	float2 coords;
	float2 vel;
	float2 heading;
	float age;
};

struct FloatyBitData {
	float2 coords;
	float2 vel;
	float2 heading;
	float age;
};

struct WaterSplineData {   // 2 ints, 17 floats
    int index;    
    float2 p0;
    float2 p1;
    float2 p2;
    float2 p3;
    float4 widths;
	float3 hue;
    float strength;   // extra data to use however
	float age;  // to allow for fade-in and fade-out
    int brushType;  // brush texture mask
};

struct AgentSimData {
	float2 worldPos;
	float2 velocity;
	float2 heading;
	float2 size;
	float3 primaryHue;  // can eventually pull these static variables out of here to avoid per-frame updates on non-dynamic attributes
	float3 secondaryHue;
	float maturity;
	float decay;
	float eatingStatus;
	float foodAmount;
};


#include "Assets/Resources/Shaders/Inc/StructsCritterData.cginc"


Texture2D<float4> fluidBackgroundColorTex;
Texture2D<float4> colorInjectionRenderTex;
Texture2D<float4> InputVelocityTex;
StructuredBuffer<ForcePoint> ForcePointsCBuffer;
Texture2D<float4> VelocityRead;
RWTexture2D<float4> VelocityWrite;
Texture2D<float4> PressureRead;
RWTexture2D<float4> PressureWrite;
Texture2D<float4> DensityRead;
RWTexture2D<float4> DensityWrite;
Texture2D<float4> DivergenceRead;
RWTexture2D<float4> DivergenceWrite;
Texture2D<float4> ObstaclesRead;

StructuredBuffer<float4> ObjectPositionsCBuffer;
RWStructuredBuffer<float2> VelocityValuesCBuffer;

RWStructuredBuffer<PlayerGlowyBitData> PlayerGlowyBitsCBuffer;
RWStructuredBuffer<WaterSplineData> WaterSplinesCBuffer;
RWStructuredBuffer<FloatyBitData> FloatyBitsCBuffer;
StructuredBuffer<AgentSimData> AgentSimDataCBuffer;
RWStructuredBuffer<TrailDotData> RipplesCBuffer;
RWStructuredBuffer<TrailDotData> TrailDotsCBuffer;

RWStructuredBuffer<float2> waterChainsReadCBuffer;
RWStructuredBuffer<float2> waterChainsWriteCBuffer;

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;

RWStructuredBuffer<float4> nutrientSamplesCBuffer;
StructuredBuffer<float4> nutrientEatAmountsCBuffer;

Texture2D<float4> _AlgaeDecomposerMapRead;
Texture2D<float4> _NutrientGridRead;
RWTexture2D<float4> nutrientMapWrite; // ???***

RWStructuredBuffer<float4> outputValuesCBuffer;
StructuredBuffer<float4> addNutrientsCBuffer;
Texture2D<float4> measureValuesTex;
RWTexture2D<float4> pooledResultTex;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;
SamplerState _PointClamp;
SamplerState _PointRepeat;

uniform float _TextureResolution;
uniform float _DeltaTime;
uniform float _InvGridScale;
uniform float _MapSize;

uniform float _ForcePosX;
uniform float _ForcePosY;
uniform float _ForceDirX;
uniform float _ForceDirY;
uniform float _ForceOn;
uniform float _ForceMagnitude;
uniform float _ForceSize;

uniform float _Viscosity;
uniform float _Damping;

uniform float _ColorRefreshAmount;
uniform float _ColorRefreshDynamicMultiplier;

uniform float _Time;

uniform float _SampleCoordX;
uniform float _SampleCoordY;

uniform float _VelocitySampleRadius;

uniform const float _VelConversionConst = 0.033;

uniform float4 _PlayerPos;

uniform float4 _AlgaeColor;
uniform float4 _NutrientsColor;

float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

[numthreads(1024,1,1)]
void SimPlayerGlowyBits (uint3 id : SV_DispatchThreadID)
{	
	PlayerGlowyBitData data = PlayerGlowyBitsCBuffer[id.x];
	float2 uv = data.coords;
	float2 vel = VelocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	float speedMult = 0.033;

	float maxAge = 256;
	
	float2 nextPos = uv + vel * speedMult;

	data.vel = vel;

	// Set Heading!!
	float velocityLerp = 85 * length(vel);
	data.heading = normalize(lerp(data.heading, vel, saturate(velocityLerp)));

	data.age = data.age + 3.0;
	if(data.age > maxAge) {
		// get random position near Player:
		float2 randomOffset = float2(rand(float2(id.x, uv.x)), rand(float2(uv.y, id.x)));
		//randomOffset = randomOffset * randomOffset * randomOffset * randomOffset;  // more concentrated at center?
		randomOffset = (randomOffset * 2 - 1) * 0.2;

		float2 spawnPos = (_PlayerPos.xy + randomOffset);

		// reset ageCounter & position
		data.coords = spawnPos;
		data.age = 0;
	}
	else {
		data.coords = nextPos;
	}

	
	
	PlayerGlowyBitsCBuffer[id.x] = data;
}

[numthreads(1024,1,1)]
void SimFloatyBits (uint3 id : SV_DispatchThreadID)
{	
	FloatyBitData floatyBitData = FloatyBitsCBuffer[id.x];
	float2 uv = floatyBitData.coords;
	float2 vel = VelocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	float speedMult = 0.0167;
	
	float2 nextPos = uv + vel * speedMult;

	floatyBitData.vel = vel;

	// Set Heading!!
	float velocityLerp = 85 * length(vel);
	floatyBitData.heading = normalize(lerp(floatyBitData.heading, vel, saturate(velocityLerp)));

	floatyBitData.age = floatyBitData.age + 0.00001;  // 1000 frame lifespan
	if(floatyBitData.age > 1.0) {
		
		//float2 spawnPos = float2(rand(float2((float)id.x, uv.x)) * 0.02 + 0.49, rand(float2(uv.y, (float)id.x)) * 0.02 + 49);		
		
		int numZones = 2;
		//float numTotalBits = 1024 * 64;
		float val01 = (float)id.x / (1024 * 64);
		float randZoneX = floor(rand(float2((float)id.x, 5)) * (float)numZones);
		float randZoneY = floor(rand(float2(val01, (float)id.x)) * (float)numZones);
		
		//x:// rand(float2((float)id.x + vel.x - vel.y, val01 + randZoneY)) * 0.01
		float2 randOffset = float2(0, 0.075 * (float)id.x / (1024 * 512));
		randOffset.x += 0.05 * rand(uv);
		float2 spawnCoords = randOffset + float2(randZoneX / 3.0 + 0.25, randZoneY / 3.0 + 0.25); // + float2(randZoneX, randZoneY)

		//float randAge = rand(randOffset * 20 * id.x + _Time);
		floatyBitData.coords = spawnCoords; //float2(rand(float2((float)id.x,0)) * 0.04 + 0.48, 0.495 + 0.01 * (float)id.x / (1024 * 64)); //spawnPos;
		floatyBitData.age = 0;
	}
	else {
		floatyBitData.coords = nextPos;
	}
	
	FloatyBitsCBuffer[id.x] = floatyBitData;
}

[numthreads(8,1,1)]
void SimRipples (uint3 id : SV_DispatchThreadID)
{	
	TrailDotData rippleData = RipplesCBuffer[id.x];
	
	int parentIndex = rippleData.parentIndex;
	AgentSimData agentSimData = AgentSimDataCBuffer[parentIndex];

	float2 parentCoords = agentSimData.worldPos / _MapSize;

	float2 uv = rippleData.coords01;
	float2 fluidVel = VelocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	float speedMult = 0.033;

	float age = rippleData.age;
	age += (1.0 / 16.0);

	float fluidInfluenceLerp = 1;  // not influenced by fluidVel for certain duration after birth

	float2 vel = lerp(-agentSimData.velocity * 0.001, fluidVel * speedMult, fluidInfluenceLerp);
	
	float2 nextPos = uv + vel;

	if(age >= 1.0) {		
		nextPos = parentCoords;
		age -= 1.0;
		float alpha = saturate(length(agentSimData.velocity * 0.25) * agentSimData.maturity * (1 - agentSimData.decay));
		rippleData.initAlpha = alpha;
	}		
	
	rippleData.age = age;
	rippleData.coords01 = nextPos;
	
	RipplesCBuffer[id.x] = rippleData;
}

[numthreads(8,1,1)]
void SimTrailDots (uint3 id : SV_DispatchThreadID)
{	
	TrailDotData trailDotData = TrailDotsCBuffer[id.x];
	
	int parentIndex = trailDotData.parentIndex;
	AgentSimData agentSimData = AgentSimDataCBuffer[parentIndex];

	float2 parentCoords = agentSimData.worldPos / _MapSize;

	float2 uv = trailDotData.coords01;
	
	float speedMult = 0.033;
	float age = trailDotData.age;	
	float frameDuration = (1.0 / 32.0);	
	age += frameDuration;

	float fluidInfluenceLerp = saturate(age * 4);

	float2 fluidVel;
	float2 vel;	
	float2 nextPos;

	float2 forwardDir = agentSimData.heading;
	float2 rightDir = float2(forwardDir.y, -forwardDir.x);
	//float randAngle = id.x * 109.27;
	//float randRadius = 0; //fmod(id.x * 10.257, 8) / 8;
	float2 localOffsets[4] = {float2(0,0.45 / _MapSize), float2(0.45 / _MapSize,0), float2(0,-0.45 / _MapSize), float2(-0.45 / _MapSize,0)};

	int localIndex = id.x % 4;

	float2 rimOffset = (forwardDir * localOffsets[localIndex].y) + rightDir * localOffsets[localIndex].x;

	if(age >= 1.0) {
		// float2(cos(randAngle) * randRadiusds * 0.4 / _MapSize, sin(randAngle) * randRadius * 0.4 / _MapSize);
		
		age -= 1.0;
		float frameProportion = age / frameDuration;

		fluidVel = VelocityRead.SampleLevel(_LinearRepeat, parentCoords + rimOffset, 0).xy;
		vel = lerp(-agentSimData.velocity * 0.0, fluidVel * speedMult, fluidInfluenceLerp);

		nextPos = parentCoords + rimOffset + vel * frameProportion;
		trailDotData.initAlpha = 1;
	}
	else {
		// Proceed Normally:
		fluidVel = VelocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
		vel = lerp(-agentSimData.velocity * 0.001, fluidVel * speedMult, fluidInfluenceLerp);
		nextPos = uv + vel;
	}
	
	trailDotData.age = age;
	trailDotData.coords01 = nextPos;
	
	TrailDotsCBuffer[id.x] = trailDotData;
}

[numthreads(1024,1,1)]
void SimWaterSplines (uint3 id : SV_DispatchThreadID)
{	
	WaterSplineData waterSplineData = WaterSplinesCBuffer[id.x];

	// ***** Move Head Point0: //

	float2 uv = waterSplineData.p0 / _MapSize;
	float2 vel = VelocityRead.SampleLevel(_LinearRepeat, uv, 3).xy;
	float speedMult = 0.033;
	
	float2 nextPos = uv + vel * speedMult;

	//waterSplineData.vel = vel;

	waterSplineData.age = waterSplineData.age + 0.001;  // 1000 frame lifespan
	if(waterSplineData.age > 1.0) {
		
		float2 spawnPos = float2(rand(float2(id.x, uv.x)), rand(float2(uv.y, id.x)));		
		waterSplineData.p0 = spawnPos * _MapSize;
		waterSplineData.p1 = waterSplineData.p0 - float2(0, -1);
		waterSplineData.p2 = waterSplineData.p1 - float2(0, -1);
		waterSplineData.p3 = waterSplineData.p2 - float2(0, -1);
		waterSplineData.age -= 1;

		float2 sampleUV = waterSplineData.p0 / _MapSize;
		float3 fluidDensityColor = DensityRead.SampleLevel(_LinearRepeat, sampleUV, 0).xyz;
		waterSplineData.hue = fluidDensityColor;
	}
	else {
		waterSplineData.p0 = nextPos * _MapSize;

		float3 fluidDensityColor = DensityRead.SampleLevel(_LinearRepeat, uv, 0).xyz;
		waterSplineData.hue = lerp(waterSplineData.hue, fluidDensityColor, 0.02);
	}
		

	float restDistance = 2;
	float lerpStrength = 0.5;

	float2 p0 = waterSplineData.p0;
	
	float2 p1 = waterSplineData.p1;
	float2 vec0to1 = p1 - p0; // after p0 has been moved, vector from old P1 to new P0	
	p1 = lerp(p1, p0 + normalize(vec0to1) * restDistance, lerpStrength * 1);

	float2 p2 = waterSplineData.p2;
	float2 vec1to2 = p2 - p1;
	p2 = lerp(p2, p1 + normalize(vec1to2) * restDistance, lerpStrength * 1);

	float2 p3 = waterSplineData.p3;
	float2 vec2to3 = p3 - p2;
	p3 = lerp(p3, p2 + normalize(vec2to3) * restDistance, lerpStrength * 1);

	waterSplineData.p0 = p0;
	waterSplineData.p1 = p1;
	waterSplineData.p2 = p2;
	waterSplineData.p3 = p3;
	
	WaterSplinesCBuffer[id.x] = waterSplineData;
}

[numthreads(1,1,1)]
void GetVelAtCoords (uint3 id : SV_DispatchThreadID)
{	
	float uvOffset = 0.75 / _MapSize; // 0.005357;  // 0.75/140   ***** REVISIT!!! *******************************
	float2 uv = float2(_SampleCoordX, _SampleCoordY);
	float2 velLeft = VelocityRead.SampleLevel(_LinearRepeat, uv + float2(-uvOffset, 0), 0).xy;
	float2 velRight = VelocityRead.SampleLevel(_LinearRepeat, uv + float2(uvOffset, 0), 0).xy;
	float2 velUp = VelocityRead.SampleLevel(_LinearRepeat, uv + float2(0, uvOffset), 0).xy;
	float2 velDown = VelocityRead.SampleLevel(_LinearRepeat, uv + float2(0, -uvOffset), 0).xy;

	float2 vel = (velLeft + velRight + velUp + velDown) / 4;

	VelocityValuesCBuffer[0] = vel;
}

[numthreads(1,1,1)]
void GetObjectVelocities (uint3 id : SV_DispatchThreadID)
{	
	
		
	float4 data = ObjectPositionsCBuffer[id.x];
	
	float2 uv = data.xy;
	float2 uvOffset = data.zw;
	
	float2 velLeft = VelocityRead.SampleLevel(_LinearRepeat, uv + float2(-uvOffset.x, 0), 0).xy;
	float2 velRight = VelocityRead.SampleLevel(_LinearRepeat, uv + float2(uvOffset.x, 0), 0).xy;
	float2 velUp = VelocityRead.SampleLevel(_LinearRepeat, uv + float2(0, uvOffset.y), 0).xy;
	float2 velDown = VelocityRead.SampleLevel(_LinearRepeat, uv + float2(0, -uvOffset.y), 0).xy;

	float2 vel = (velLeft + velRight + velUp + velDown) / 4;

	VelocityValuesCBuffer[id.x] = vel;
}

[numthreads(16,16,1)]
void RefreshColor (uint3 id : SV_DispatchThreadID)
{	
	float xCoord = ((float)id.x + 0.5)  / _TextureResolution;
	float yCoord = ((float)id.y + 0.5)  / _TextureResolution;
	float2 uvOrigin = float2(xCoord, yCoord);

	float diffusionAmount = 0.1;
	// Diffusion
	float4 amountRight = DensityRead[int2(id.x + 1, id.y)];
    float4 amountLeft = DensityRead[int2(id.x - 1, id.y)];
    float4 amountUp = DensityRead[int2(id.x, id.y + 1)];
    float4 amountDown = DensityRead[int2(id.x, id.y - 1)];
    float4 amountCenter = DensityRead[id.xy];
	float4 currentColor = lerp(amountCenter, (amountCenter + amountRight + amountLeft + amountUp + amountDown) / 5, diffusionAmount);

	//float4 reactionDiffusionSample = _AlgaeDecomposerMapRead.SampleLevel(_LinearClamp, uvOrigin, 0);
	float4 nutrientGridSample = _NutrientGridRead.SampleLevel(_LinearClamp, uvOrigin, 0);
	
	float4 sourceColorDynamic = colorInjectionRenderTex.SampleLevel(_LinearRepeat, uvOrigin, 0);
	float4 newColor = lerp(currentColor, float4(0,0,0,0), _ColorRefreshAmount);
	float stampAlpha = saturate(_ColorRefreshDynamicMultiplier * sourceColorDynamic.a);	
	newColor.rgb = lerp(newColor.rgb, sourceColorDynamic.rgb, stampAlpha); //saturate(_ColorRefreshDynamicMultiplier * sourceColorDynamic.a));
	newColor.a = lerp(newColor.a, 1, stampAlpha);
	
	newColor.a = saturate(nutrientGridSample.w * 1 + nutrientGridSample.x * 1);

	float3 nutrientsHue = _NutrientsColor.rgb * 1.5;
	float3 algaeHue = lerp(_AlgaeColor.rgb, float3(0.275,0.8,0.175), 0.95) * 1.0;
	int checkerMask01 = ((id.x + id.y)) % 2;
	int checkerMask02 = 1 - checkerMask01; // ((id.x + id.y + 1)) % 2;
	float mask01 = (float)(checkerMask01 * 0.25 + 0.75);
	float mask02 = (float)(checkerMask02 * 0.25 + 0.75);
	newColor.rgb = lerp(newColor.rgb, nutrientsHue, nutrientGridSample.x); // * mask01);
	newColor.rgb = lerp(newColor.rgb, algaeHue, saturate(nutrientGridSample.w)); // * mask02));
	newColor.a = max(nutrientGridSample.x, nutrientGridSample.w) * 4;
	//newColor.a = ((float)mask01 * nutrientGridSample.x + (float)mask02 * nutrientGridSample.w) * 2;
	
	
	DensityWrite[id.xy] = saturate(newColor); //float4(newColor, 1); //lerp(currentColor, sourceColorDynamic, _ColorRefreshAmount);

	

	//OLD:
	//float4 sourceColorBackground = float4(0,0,0,1); //lerp(float4(0.012, 0.16, 0.12, 1), fluidBackgroundColorTex.SampleLevel(_LinearRepeat, uvOrigin, 0), 0.04);
	//float4 sourceColorDynamic = colorInjectionRenderTex.SampleLevel(_LinearRepeat, uvOrigin, 0);
	//sourceColor.a = saturate(sourceColor.a);
	//float4 currentColor = DensityRead[id.xy];

	//float3 newColor = lerp(currentColor.rgb, sourceColorBackground.rgb, _ColorRefreshAmount);
	//newColor = lerp(newColor, sourceColorDynamic.rgb, _ColorRefreshDynamicMultiplier * sourceColorDynamic.a);
	
	//DensityWrite[id.xy] = float4(newColor, 1); //lerp(currentColor, sourceColorDynamic, _ColorRefreshAmount);
}

[numthreads(16,16,1)]
void InitializeVelocity (uint3 id : SV_DispatchThreadID)
{
	float xCoord = ((float)id.x + 0.5)  / _TextureResolution;
	float yCoord = ((float)id.y + 0.5)  / _TextureResolution;
	float2 uvOrigin = float2(xCoord, yCoord);

	VelocityWrite[id.xy] = float4(sin(20 * uvOrigin.y) * uvOrigin.x,sin(13.79 * uvOrigin.x) * uvOrigin.y,0,0) * 0.2; // 
}

[numthreads(16,16,1)]
void Advection (uint3 id : SV_DispatchThreadID)
{

	float xCoord = ((float)id.x + 0.5)  / _TextureResolution;
	float yCoord = ((float)id.y + 0.5)  / _TextureResolution;
	float2 uvOrigin = float2(xCoord, yCoord);

	float isSolid = ObstaclesRead[id.xy].b;	
	float2 uvSample = uvOrigin - _DeltaTime * _InvGridScale * VelocityRead.SampleLevel(_LinearRepeat, uvOrigin, 0).xy;
	float4 newDensity = DensityRead.SampleLevel(_LinearRepeat, uvSample, 0);

	if(isSolid > 0.5) {
		DensityWrite[id.xy] = newDensity;
		VelocityWrite[id.xy] = float4(0,0,0,0);

		return;
	}

	
	
	
	float4 newVelocity = VelocityRead.SampleLevel(_LinearRepeat, uvSample, 0);
		
	DensityWrite[id.xy] = newDensity;
	VelocityWrite[id.xy] = newVelocity * (1.0 - saturate(_Damping)); // + float4(uvSample, 0, 0);
}

[numthreads(16,16,1)]
void ViscousDiffusion (uint3 id : SV_DispatchThreadID)
{
	float xCoord = ((float)id.x + 0.5)  / _TextureResolution;
	float yCoord = ((float)id.y + 0.5)  / _TextureResolution;
	float2 uvOrigin = float2(xCoord, yCoord);
	float ps = 1.0 / _TextureResolution;

	half viscosity = _Viscosity;

	half alpha = (_InvGridScale * _InvGridScale) / (viscosity * _DeltaTime);
	half beta = 4.0 + alpha;

	half4 leftVal = VelocityRead.SampleLevel(_LinearRepeat, uvOrigin + half2(-ps, 0), 0);
	half4 rightVal = VelocityRead.SampleLevel(_LinearRepeat, uvOrigin + half2(ps, 0), 0);
	half4 topVal = VelocityRead.SampleLevel(_LinearRepeat, uvOrigin + half2(0, ps), 0);
	half4 bottomVal = VelocityRead.SampleLevel(_LinearRepeat, uvOrigin + half2(0, -ps), 0);
	half4 centerVal = VelocityRead.SampleLevel(_LinearRepeat, uvOrigin, 0);

	float4 newVal = (leftVal + rightVal + topVal + bottomVal + centerVal * alpha) / beta;

	VelocityWrite[id.xy] = newVal;
}

[numthreads(16,16,1)]
void VelocityInjectionPoints (uint3 id : SV_DispatchThreadID)
{	
	float4 currentVelocity = VelocityRead[id.xy];

	float isSolid = ObstaclesRead[id.xy].b;
	if(isSolid > 0.5) {
		VelocityWrite[id.xy] = currentVelocity;
		return;
	}
	
	uint elements;
	uint stride;
	ForcePointsCBuffer.GetDimensions(elements, stride);

	float xCoord = ((float)id.x + 0.5) / _TextureResolution;
	float yCoord = ((float)id.y + 0.5) / _TextureResolution;
	float2 pixelCoords = float2(xCoord, yCoord);
	
	float2 newForce = currentVelocity.xy; //float2(0,0);

	//float influenceAmount = 0;
	for(uint i = 0; i < elements; i++) {
		
		ForcePoint fp;
		fp = ForcePointsCBuffer[i];	

		float2 forceCoords = float2(fp.posX, fp.posY);
		float animatedStrengthModifierX = sin((_Time + i * 10.0) * 0.2) * _ForceMagnitude;
		float animatedStrengthModifierY = cos((_Time - i * 20.1793) * 0.182451) * _ForceMagnitude;
		float2 forceVal = float2(fp.velX * animatedStrengthModifierX, fp.velY * animatedStrengthModifierY);		
		float dist = length(pixelCoords - forceCoords);
		float influenceAmount = exp(-fp.size * ((forceCoords.x - pixelCoords.x) * (forceCoords.x - pixelCoords.x) + (forceCoords.y - pixelCoords.y) * (forceCoords.y - pixelCoords.y)) / dist);
		//newForce += forceVal * _DeltaTime * ;
		newForce = lerp(newForce, forceVal, influenceAmount);
	}
	float damping = saturate(_Damping);

	// STIR TOOL::::	
	float2 stirCoords = float2(_ForcePosX, _ForcePosY);
	float distanceToStirOrigin = length(pixelCoords - stirCoords);
	float attenuation = exp(-_ForceSize * ((stirCoords.x - pixelCoords.x) * (stirCoords.x - pixelCoords.x) + (stirCoords.y - pixelCoords.y) * (stirCoords.y - pixelCoords.y)) / distanceToStirOrigin);
	float2 playerStirVel = float2(_ForceDirX, _ForceDirY);
	
	newForce = lerp(newForce, playerStirVel, attenuation * _ForceOn);

	VelocityWrite[id.xy] = float4(newForce, 0, 0) * (1.0 - damping);
}

[numthreads(16,16,1)]
void VelocityInjectionPointsVortex (uint3 id : SV_DispatchThreadID)
{	
	float4 currentVelocity = VelocityRead[id.xy];

	float isSolid = ObstaclesRead[id.xy].b;
	if(isSolid > 0.5) {
		VelocityWrite[id.xy] = currentVelocity;
		return;
	}
	
	uint elements;
	uint stride;
	ForcePointsCBuffer.GetDimensions(elements, stride);

	float xCoord = ((float)id.x + 0.5) / _TextureResolution;
	float yCoord = ((float)id.y + 0.5) / _TextureResolution;
	float2 pixelCoords = float2(xCoord, yCoord);
	
	float2 newForce = currentVelocity.xy; //float2(0,0);

	for(uint i = 0; i < elements; i++) {
		
		ForcePoint fp;
		fp = ForcePointsCBuffer[i];	

		float2 forceCoords = float2(fp.posX, fp.posY);
		float animatedStrengthModifierX = sin((_Time + i * 1.01) * 0.2) * _ForceMagnitude;
		float animatedStrengthModifierY = cos((_Time - i * 1.793) * 0.182451) * _ForceMagnitude;
		float2 forceVal = float2(fp.velX * animatedStrengthModifierX, fp.velY * animatedStrengthModifierY);	
		
		float2 vortexOriginToPoint = pixelCoords - forceCoords;
		float dist = length(vortexOriginToPoint);
		float2 vortexToPointDir = normalize(vortexOriginToPoint);
		float2 vortexForce = float2(vortexToPointDir.y, -vortexToPointDir.x) * dist * length(forceVal);
		
		float influenceAmount = exp(-fp.size * ((forceCoords.x - pixelCoords.x) * (forceCoords.x - pixelCoords.x) + (forceCoords.y - pixelCoords.y) * (forceCoords.y - pixelCoords.y)) / dist);
		
		newForce = lerp(newForce, vortexForce, influenceAmount);
	}
	float damping = saturate(_Damping);

	// STIR TOOL::::	
	float2 stirCoords = float2(_ForcePosX, _ForcePosY);
	float distanceToStirOrigin = length(pixelCoords - stirCoords);
	float attenuation = exp(-_ForceSize * ((stirCoords.x - pixelCoords.x) * (stirCoords.x - pixelCoords.x) + (stirCoords.y - pixelCoords.y) * (stirCoords.y - pixelCoords.y)) / distanceToStirOrigin);
	float2 playerStirVel = float2(_ForceDirX, _ForceDirY);
	
	newForce = lerp(newForce, playerStirVel, attenuation * _ForceOn);

	VelocityWrite[id.xy] = float4(newForce, 0, 0) * (1.0 - damping);
}

[numthreads(16,16,1)]
void VelocityDivergence (uint3 id : SV_DispatchThreadID)
{
	float xCoord = ((float)id.x + 0.5)  / _TextureResolution;
	float yCoord = ((float)id.y + 0.5)  / _TextureResolution;
	float2 uvOrigin = float2(xCoord, yCoord);
	float ps = 1.0 / _TextureResolution;

	float4 leftVal = VelocityRead.SampleLevel(_LinearClamp, uvOrigin + half2(-ps, 0), 0);  // should I use direct index access for these?
	float4 rightVal = VelocityRead.SampleLevel(_LinearClamp, uvOrigin + half2(ps, 0), 0);
	float4 topVal = VelocityRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, ps), 0);
	float4 bottomVal = VelocityRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, -ps), 0);

	half4 leftObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(-ps, 0), 0);
	half4 rightObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(ps, 0), 0);
	half4 topObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, ps), 0);
	half4 bottomObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, -ps), 0);

	if(leftObstacle.b > 0.5) leftVal.xy = leftObstacle.xy;
	if(rightObstacle.b > 0.5) rightVal.xy = rightObstacle.xy;
	if(topObstacle.b > 0.5) topVal.xy = topObstacle.xy;
	if(bottomObstacle.b > 0.5) bottomVal.xy = bottomObstacle.xy;
	
	float divergence = _InvGridScale * 0.5 * ((rightVal.x - leftVal.x) + (topVal.y - bottomVal.y));

	DivergenceWrite[id.xy] = float4(divergence, divergence, divergence, 1);
}

[numthreads(16,16,1)]
void PressureJacobi (uint3 id : SV_DispatchThreadID)
{
	//float isSolid = saturate(ceil(ObstaclesRead[id.xy].r));

	float xCoord = ((float)id.x + 0.5)  / _TextureResolution;
	float yCoord = ((float)id.y + 0.5)  / _TextureResolution;
	float2 uvOrigin = float2(xCoord, yCoord);
	float ps = 1.0 / _TextureResolution;
	
	half alpha = -(_InvGridScale * _InvGridScale);
	half beta = 4.0;

	half4 leftObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(-ps, 0), 0);
	half4 rightObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(ps, 0), 0);
	half4 topObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, ps), 0);
	half4 bottomObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, -ps), 0);
		
	half4 centerPressure = PressureRead[id.xy];
	half4 leftPressure = PressureRead.SampleLevel(_LinearClamp, uvOrigin + half2(-ps, 0), 0);
	half4 rightPressure = PressureRead.SampleLevel(_LinearClamp, uvOrigin + half2(ps, 0), 0);
	half4 topPressure = PressureRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, ps), 0);
	half4 bottomPressure = PressureRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, -ps), 0);

	if(leftObstacle.b > 0.5) leftPressure = centerPressure;
	if(rightObstacle.b > 0.5) rightPressure = centerPressure;
	if(topObstacle.b > 0.5) topPressure = centerPressure;
	if(bottomObstacle.b > 0.5) bottomPressure = centerPressure;

	half4 divergence = DivergenceRead.SampleLevel(_LinearRepeat, uvOrigin, 0);
	float4 newPressure = (leftPressure + rightPressure + topPressure + bottomPressure + divergence * alpha) / beta;
	float pressureDamping = 0.0025;
	PressureWrite[id.xy] = newPressure * (1.0 - pressureDamping);
}

[numthreads(16,16,1)]
void SubtractGradient (uint3 id : SV_DispatchThreadID)
{
	float4 centerObstacle = ObstaclesRead[id.xy];
	if (centerObstacle.b > 0.5) {
        VelocityWrite[id.xy] = float4(centerObstacle.xy,0,0);
        return;
    }

	float xCoord = ((float)id.x + 0.5)  / _TextureResolution;
	float yCoord = ((float)id.y + 0.5)  / _TextureResolution;
	float2 uvOrigin = float2(xCoord, yCoord);
	float ps = 1.0 / _TextureResolution;
	
	float centerPressure = PressureRead[id.xy].x;
	float leftPressure = PressureRead.SampleLevel(_LinearClamp, uvOrigin + half2(-ps, 0), 0).x;
	float rightPressure = PressureRead.SampleLevel(_LinearClamp, uvOrigin + half2(ps, 0), 0).x;
	float topPressure = PressureRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, ps), 0).x;
	float bottomPressure = PressureRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, -ps), 0).x;

	half4 leftObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(-ps, 0), 0);
	half4 rightObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(ps, 0), 0);
	half4 topObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, ps), 0);
	half4 bottomObstacle = ObstaclesRead.SampleLevel(_LinearClamp, uvOrigin + half2(0, -ps), 0);
	
	// Copied from internet example... still need to understand this better::::
	float2 obstV = float2(0,0);
	float2 vMask = float2(1,1);

	if(leftObstacle.b > 0.5) { leftPressure = centerPressure; obstV.x = leftObstacle.x; vMask.x = 0; }
	if(rightObstacle.b > 0.5) { rightPressure = centerPressure; obstV.x = rightObstacle.x; vMask.x = 0; }
	if(topObstacle.b > 0.5) { topPressure = centerPressure; obstV.y = topObstacle.y; vMask.y = 0; }
	if(bottomObstacle.b > 0.5) { bottomPressure = centerPressure; obstV.y = bottomObstacle.y; vMask.y = 0; }
	
	float4 newVelocity = VelocityRead.SampleLevel(_LinearRepeat, uvOrigin, 0);
	float2 grad = 0.5 * _InvGridScale * half2(rightPressure - leftPressure, topPressure - bottomPressure);
	newVelocity.xy -= grad;
	VelocityWrite[id.xy] = float4(newVelocity.xy * vMask + obstV, 0, 0);
}

[numthreads(1024,1,1)]
void CSPinWaterChainsData (uint3 id : SV_DispatchThreadID)
{	
	int rootIndex = id.x * 16; // hardcoded 16 !!!!! ***********************
	float2 waterChainData = waterChainsReadCBuffer[rootIndex];
	
	float2 uv = waterChainData / _MapSize;
	
	float speedMult = 0.033;
	
	// blah blah 

	float2 fluidVel = VelocityRead.SampleLevel(_LinearRepeat, uv, 0).xy;
	
	float2 nextCoords = uv + fluidVel * speedMult;
	
	waterChainsWriteCBuffer[rootIndex] = nextCoords * _MapSize;
}

[numthreads(1024,1,1)]
void CSShiftWaterChainsData (uint3 id : SV_DispatchThreadID)
{	
	uint pointIndex = id.x;
	uint localIndex = pointIndex % 16;  // **** HARDCODED!!!! ****

	uint waterChainIndex = floor(id.x / 16);   // **** HARDCODED!!!! ****

	float minDist = 0.1;

	if(localIndex != 0) {  // don't move head point
		float2 ownPos = waterChainsReadCBuffer[pointIndex]; // try to avoid divide by 0
		float2 nextPos = waterChainsReadCBuffer[pointIndex - 1]; // get neighbor's position
						
		float2 vecToNext = nextPos - ownPos;
		float distToNext = length(vecToNext);
		
		if(distToNext < minDist) {
					
		}
		else { // normal non-overlapping
			waterChainsWriteCBuffer[pointIndex] = lerp(ownPos, nextPos, 0.45);			
		}

		//newDist = max(minDist, distToNext);	
		//waterChainsWriteCBuffer[pointIndex] = lerp(ownPos, nextPos - dirToNext * newDist, 0.05);

		//waterChainsWriteCBuffer[pointIndex] = nextPos;
	}
}

[numthreads(1024,1,1)]
void CSSwapWaterChainsData (uint3 id : SV_DispatchThreadID)
{	
	waterChainsWriteCBuffer[id.x] = waterChainsReadCBuffer[id.x];
}

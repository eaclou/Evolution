#pragma kernel CSMeasureInitCritterDistances
#pragma kernel CSReduceCritterDistances32
#pragma kernel CSEatSelectedFoodParticles
#pragma kernel CSCopyFoodParticlesBuffer
#pragma kernel CSMeasureTotalFoodParticlesAmount
#pragma kernel CSSimulateAlgaeParticles

#include "Assets/Resources/Shaders/Inc/StructsCritterData.cginc"
#include "Assets/Resources/Shaders/Inc/StructsAlgaeParticles.cginc"

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;

StructuredBuffer<AlgaeParticleData> foodParticlesRead;
RWStructuredBuffer<AlgaeParticleData> foodParticlesWrite;
RWTexture2D<float4> foodParticlesNearestCrittersRT;

RWStructuredBuffer<AlgaeParticleData> closestParticlesDataCBuffer;

StructuredBuffer<float> foodParticlesEatAmountsRead;
RWStructuredBuffer<float> foodParticlesEatAmountsCBuffer;

StructuredBuffer<int> selectRespawnFoodParticleIndicesCBuffer;

Texture2D<float4> critterDistancesRead; // used to reduce foodParticlesNearestCrittersRT down to minimum distances
RWTexture2D<float4> critterDistancesWrite;

Texture2D<float4> obstaclesRead;
Texture2D<float4> velocityRead;
Texture2D<float4> altitudeRead;

Texture2D<float4> _SpawnDensityMap;

uniform float _RespawnFoodParticles;
uniform float _Time;
uniform float _MapSize;

uniform float _MinParticleSize;
uniform float _MaxParticleSize;
uniform float _ParticleNutrientDensity;

uniform float _FoodParticleRegrowthRate;

uniform float4 _FoodSprinklePos;
uniform float _FoodSprinkleRadius;

uniform float _GlobalNutrients;
uniform float _SolarEnergy;

uniform float _AlgaeGrowthNutrientsMask;
uniform float _AlgaeBaseGrowthRate;
uniform float _AlgaeGrowthNutrientUsage;
uniform float _AlgaeGrowthOxygenProduction;
uniform float _AlgaeAgingRate;
uniform float _AlgaeDecayRate;
uniform float _AlgaeSpawnMaxAltitude;
uniform float _AlgaeParticleInitMass;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;
SamplerState _PointClamp;
SamplerState _PointRepeat;

float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

[numthreads(1024,1,1)]
void CSMeasureInitCritterDistances (uint3 id : SV_DispatchThreadID)
{	
	int particleIndex = id.x;
	int critterIndex = id.y;

	AlgaeParticleData particleData = foodParticlesRead[particleIndex];
	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	float mouthRadius = critterInitData.boundingBoxSize.x * critterSimData.growthPercentage; // **** REMEMBER TO *0.5 EVENTUALLY FOR ACCURATE SIZE
	float2 mouthCenterPos = critterSimData.heading * critterInitData.boundingBoxSize.y * 0.5 * critterSimData.growthPercentage;

	float2 particleToCritter = critterSimData.worldPos.xy + mouthCenterPos * 1.0 - particleData.worldPos;

	float distanceSquared = particleToCritter.x * particleToCritter.x + particleToCritter.y * particleToCritter.y;
	
	foodParticlesNearestCrittersRT[int2(particleIndex, critterIndex)] = float4(particleData.index, distanceSquared, particleData.worldPos);
		
}

[numthreads(1,1,1)]
void CSReduceCritterDistances32 (uint3 id : SV_DispatchThreadID)
{	
	
	int critterIndex = id.y;

	//CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];
			
	float closestParticleIndex = 0;
	float minSquaredDistance = 50000;
		
	for(int i = 0; i < 32; i++) {
		
		int particleIndex = id.x * 32 + i;
		
		float4 sourceData = critterDistancesRead[int2(particleIndex, critterIndex)];
		
		AlgaeParticleData particleData = foodParticlesRead[particleIndex];

		if(sourceData.y < minSquaredDistance) {
			if(particleData.isActive > 0.5) {
				minSquaredDistance = sourceData.y;
				closestParticleIndex = sourceData.x;
			}				
		}
	}
		
	AlgaeParticleData closestFoodData = foodParticlesRead[closestParticleIndex];	
		
	critterDistancesWrite[int2(id.x, critterIndex)] = float4(closestParticleIndex, minSquaredDistance, 1.0, 1.0);
	closestParticlesDataCBuffer[critterIndex] = closestFoodData; // assuming there's only 1 thread at end
}


[numthreads(1,1,1)]
void CSEatSelectedFoodParticles (uint3 id : SV_DispatchThreadID)
{	
	// Check distance to nearest particle
	int critterIndex = id.x;

	float4 data = critterDistancesRead[int2(0, id.x)];

	int particleIndex = (int)data.x;

	AlgaeParticleData particleData = foodParticlesRead[particleIndex];
	
	foodParticlesWrite[particleIndex] = particleData;

	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	float eatenAmount = 0.0;

	float isAlive01 = saturate((critterSimData.embryoPercentage - 0.99) * 10000) * saturate(((1.0 - critterSimData.decayPercentage) - 0.99) * 10000);

	float distanceSquared = data.y;
	float mouthRadius = critterInitData.boundingBoxSize.x * critterSimData.growthPercentage;  // **** REMEMBER TO *0.5 EVENTUALLY FOR ACCURATE SIZE
	float particleRadius = particleData.radius;
	float combinedRadius = (mouthRadius * 0.5 + particleRadius * 0.5) * isAlive01 * critterSimData.consumeOn;
	float mass = critterSimData.currentBiomass;
	if(distanceSquared < combinedRadius * combinedRadius) {	
		
		if(critterSimData.consumeOn > 0.5) {   // revisit
			eatenAmount = mass * 0.025; // mouthRadius * mouthRadius * 0.025; // * critterInitData.eatEfficiencyPlant * 0.05f;		
			
			foodParticlesWrite[particleIndex].biomass = particleData.biomass - eatenAmount;
			
				
			if(foodParticlesWrite[particleIndex].biomass <= 0) {
				foodParticlesWrite[particleIndex].isActive = 0;
				foodParticlesWrite[particleIndex].isSwallowed = 1.0;
				foodParticlesWrite[particleIndex].critterIndex = critterIndex;				
			}
		}	
	}

	foodParticlesEatAmountsCBuffer[id.x] = eatenAmount;
}

[numthreads(1024,1,1)]
void CSCopyFoodParticlesBuffer (uint3 id : SV_DispatchThreadID)
{	
	AlgaeParticleData particleData = foodParticlesRead[id.x];
	
	foodParticlesWrite[id.x] = particleData;
}

[numthreads(1,1,1)]
void CSMeasureTotalFoodParticlesAmount (uint3 id : SV_DispatchThreadID)
{	
	AlgaeParticleData copyData = foodParticlesRead[id.x];
	
	float totalBiomassAmount = 0;
	float totalOxygenProduced = 0.0;
	float totalWasteProduced = 0.0;
	float totalNutrientsUsed = 0.0;
	
	for(int i = 0; i < 32; i++) {		
		int particleIndex = id.x * 32 + i;		
		AlgaeParticleData particleData = foodParticlesRead[particleIndex];				
		
		totalBiomassAmount += particleData.biomass;
		totalOxygenProduced += particleData.oxygenProduced;
		totalWasteProduced += particleData.wasteProduced;
		totalNutrientsUsed += particleData.nutrientsUsed;
	}

	copyData.biomass = totalBiomassAmount;
	copyData.oxygenProduced = totalOxygenProduced;
	copyData.wasteProduced = totalWasteProduced;
	copyData.nutrientsUsed = totalNutrientsUsed;
	
	foodParticlesWrite[id.x] = copyData;
}

[numthreads(1024,1,1)]
void CSSimulateAlgaeParticles (uint3 id : SV_DispatchThreadID)
{
	// Check if particle isn't in the water:

	AlgaeParticleData foodParticle = foodParticlesRead[id.x];
	
	if(foodParticle.isActive > 0.5) { // poor man's boolean -- Being Simulated
		
		float2 uv = foodParticle.worldPos / _MapSize;
		float2 altUV = uv * 0.5 + 0.25;
		float4 altitudeTexSample = altitudeRead.SampleLevel(_LinearClamp, altUV, 0);
		float altitudeRaw = altitudeTexSample.x;

		float2 posOffset = float2(0,0);

		float bodyMass = foodParticle.biomass;
		float wasteMass = 0;
		float oxygenProduced = 0;
		float nutrientsUsed = 0;

		//float2 vel = velocityRead.SampleLevel(_LinearRepeat, uv, 2).xy;
		//float speedMult = 0.0075;				
		
		//posOffset += vel * speedMult * _MapSize;

		if(foodParticle.isDecaying < 0.5) {  // ALIVE !!!!!
		
			// Growth: // sample nutrients & light?
			float nutrientsGrowthMask = saturate(_GlobalNutrients * _AlgaeGrowthNutrientsMask);
			float lightGrowthMask = saturate((altitudeRaw - 0.25) * 4.0 + 0.25);
			
			float growthMass = _AlgaeBaseGrowthRate * nutrientsGrowthMask * lightGrowthMask * _SolarEnergy;

			nutrientsUsed = growthMass * _AlgaeGrowthNutrientUsage;
			oxygenProduced = (growthMass + bodyMass * 0.0005) * _AlgaeGrowthOxygenProduction;

			bodyMass += growthMass;

			foodParticlesWrite[id.x].age = foodParticle.age + _AlgaeAgingRate; 

			foodParticlesWrite[id.x].isDecaying = foodParticle.isDecaying + (1.0 - saturate((altitudeRaw - 0.1) * 100)) * 0.01;

			if(foodParticle.age > 2.0) {  // Dies of old age:
				foodParticlesWrite[id.x].isDecaying = 1.0;
			}
		}
		else {  // DEAD !!!!!
			// if is fully decayed:
			float decayEfficiency = 1.0;
			float decayRate = _AlgaeDecayRate;
			float decayMass = decayRate * decayEfficiency;
						
			bodyMass -= decayMass;
			wasteMass += decayMass;
			
			if(bodyMass <= 0.0) {  // fully decayed:
				foodParticlesWrite[id.x].isActive = 0.0;
				foodParticlesWrite[id.x].isDecaying = 0.0;
				bodyMass = 0;
			}
		}

		foodParticlesWrite[id.x].worldPos = foodParticle.worldPos + posOffset;
		foodParticlesWrite[id.x].biomass = bodyMass;
		foodParticlesWrite[id.x].wasteProduced = wasteMass;
		foodParticlesWrite[id.x].oxygenProduced = oxygenProduced;
		foodParticlesWrite[id.x].nutrientsUsed = nutrientsUsed;
	}
	else {  // INACTIVE:::
		
		foodParticlesWrite[id.x].biomass = 0;
		foodParticlesWrite[id.x].oxygenProduced = 0;
		foodParticlesWrite[id.x].wasteProduced = 0;
		foodParticlesWrite[id.x].nutrientsUsed = 0;

		if(_RespawnFoodParticles > 0.5) {	
		
			float rand01 = rand(float2(_Time * 135.79 + (float)foodParticlesRead[id.x].index * 30.17896, _Time * 28.463));
			float randX = rand(float2((float)id.x, _Time));
			float randY = rand(float2(randX * 62.39 + _Time, (float)id.x));

			float2 spawnUV = float2(randX, randY) * 0.5 + 0.25;			
			
			float4 spawnAltitudeSample = altitudeRead.SampleLevel(_LinearClamp, spawnUV, 0);
			
			if(rand01 < 0.25) {  // to prevent mass respawning, overshooting the intended max global food amount ?  // Needed?
				if(spawnAltitudeSample.x < _AlgaeSpawnMaxAltitude) {  // in water only? // for now...
				
					foodParticlesWrite[id.x].worldPos = float2(randX * _MapSize, randY * _MapSize);

					float randRadius = rand(float2(randX * 10, randY * -3.37)) * (_MaxParticleSize - _MinParticleSize) + _MinParticleSize;					
					
					foodParticlesWrite[id.x].radius = 1.0; //randRadius;
					foodParticlesWrite[id.x].biomass = _AlgaeParticleInitMass;
					foodParticlesWrite[id.x].isActive = 1.0;
					foodParticlesWrite[id.x].isDecaying = 0.0;
					foodParticlesWrite[id.x].isSwallowed = 0.0;
					foodParticlesWrite[id.x].digestedAmount = 0.0;
					foodParticlesWrite[id.x].age = rand(float2(rand01 * 70.158, randX * 13.37)) * 0.5;
				}			
			}			
		}
	}
}

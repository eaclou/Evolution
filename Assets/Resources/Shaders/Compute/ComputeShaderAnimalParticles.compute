//#pragma kernel CSMeasureInitCritterDistances
//#pragma kernel CSReduceCritterDistances32
#pragma kernel CSNewMeasureDistancesInit
#pragma kernel CSNewMeasureDistancesMainA
#pragma kernel CSMeasureInitCursorDistances
#pragma kernel CSFetchParticleByID
#pragma kernel CSEatSelectedAnimalParticles
#pragma kernel CSCopyAnimalParticlesBuffer
#pragma kernel CSMeasureTotalAnimalParticlesAmount
#pragma kernel CSSimulateAnimalParticles

#include "Assets/Resources/Shaders/Inc/StructsCritterData.cginc"
#include "Assets/Resources/Shaders/Inc/StructsAnimalParticles.cginc"

StructuredBuffer<CritterInitData> critterInitDataCBuffer;
StructuredBuffer<CritterSimData> critterSimDataCBuffer;

StructuredBuffer<AnimalParticleData> animalParticlesRead;
RWStructuredBuffer<AnimalParticleData> animalParticlesWrite;
RWTexture2D<float4> animalParticlesNearestCrittersRT;

RWStructuredBuffer<AnimalParticleData> closestParticlesDataCBuffer;

RWStructuredBuffer<float4> _ClosestZooplanktonCBuffer;
//StructuredBuffer<float4> _CritterToZooplanktonDistancesRead;

RWStructuredBuffer<AnimalParticleData> selectedAnimalParticleDataCBuffer;
StructuredBuffer<float4> cursorDistancesRead; // used to reduce foodParticlesNearestCrittersRT down to minimum distances
RWStructuredBuffer<float4> cursorDistancesWrite;

StructuredBuffer<AnimalParticleData> _RepresentativeGenomeCBuffer;

StructuredBuffer<float> animalParticlesEatAmountsRead;
RWStructuredBuffer<float> animalParticlesEatAmountsCBuffer;

StructuredBuffer<int> selectRespawnAnimalParticleIndicesCBuffer;

Texture2D<float4> critterDistancesRead; // used to reduce animalParticlesNearestCrittersRT down to minimum distancesanimalParticleData
RWTexture2D<float4> critterDistancesWrite;

Texture2D<float4> _CritterToZooplanktonDistancesTexRead;
RWTexture2D<float4> _CritterToZooplanktonDistancesTexWrite;


Texture2D<float4> obstaclesRead;  // water info
Texture2D<float4> velocityRead;
Texture2D<float4> altitudeRead;

Texture2D<float4> _ResourceGridRead;

Texture2D<float4> _SpawnDensityMap;
uniform float _SpiritBrushPosNeg;
uniform float _IsBrushing;

uniform float _RespawnAnimalParticles;
uniform float _Time;
uniform float _MapSize;

uniform float _GlobalWaterLevel;

uniform float _MouseCoordX;
uniform float _MouseCoordY;

uniform int _SelectedParticleID;
uniform int _ClosestParticleID;

uniform float _MinParticleSize;
uniform float _MaxParticleSize;
uniform float _ParticleNutrientDensity; // refactor how nutrient content works

uniform float _AnimalParticleRegrowthRate;

uniform float4 _SpawnPos;
uniform float _SpawnRadius;

uniform float _SpawnPosX;
uniform float _SpawnPosY;

uniform float _GlobalOxygenLevel;
uniform float _GlobalAlgaeLevel;

uniform float _MasterSwimSpeed; // = 0.35;
uniform float _AlignMaskRange; // = 0.025;
uniform float _AlignMaskOffset; // = 0.0833;
uniform float _AlignSpeedMult; // = 0.00015;
uniform float _AttractMag; // = 0.0000137;
uniform float _AttractMaskMaxDistance; // = 0.0036;
uniform float _AttractMaskOffset; // = 0.5;
uniform float _SwimNoiseMag; // = 0.000086;
uniform float _SwimNoiseFreqMin; // = 0.00002
uniform float _SwimNoiseFreqRange; // = 0.0002
uniform float _SwimNoiseOnOffFreq; //  = 0.0001
uniform float _ShoreCollisionMag; // = 0.0065;
uniform float _ShoreCollisionDistOffset; // = 0.15;
uniform float _ShoreCollisionDistSlope; // = 3.5;

uniform float _AgingMult;

SamplerState _LinearClamp;
SamplerState _LinearRepeat;
SamplerState _PointClamp;
SamplerState _PointRepeat;

float rand(float2 co){   // OUTPUT is in [0,1] RANGE!!!
	return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}


[numthreads(32,1,1)]
void CSNewMeasureDistancesInit (uint3 id : SV_DispatchThreadID)
{	
	
	int critterIndex = id.y;
	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	float closestParticleIndex = 0;
	float minSquaredDistance = 100000;
	
	for(int i = 0; i < 32; i++) {
		int particleIndex = id.x * 32 + i;
		AnimalParticleData particleData = animalParticlesRead[particleIndex];
	
		float mouthRadius = critterInitData.boundingBoxSize.x * critterSimData.growthPercentage; // **** REMEMBER TO *0.5 EVENTUALLY FOR ACCURATE SIZE
		float2 mouthCenterPos = critterSimData.heading * critterInitData.boundingBoxSize.y * 0.5 * critterSimData.growthPercentage;

		float2 particleToCritter = critterSimData.worldPos.xy + mouthCenterPos * 1.0 - particleData.worldPos.xy;

		float distanceSquared = particleToCritter.x * particleToCritter.x + particleToCritter.y * particleToCritter.y;
		if(particleData.isActive > 0.5) {
			if(distanceSquared < minSquaredDistance) {
			
				minSquaredDistance = distanceSquared;
				closestParticleIndex = particleIndex;
			}				
		}
	}	

	_CritterToZooplanktonDistancesTexWrite[int2(id.x, critterIndex)] = float4(closestParticleIndex, minSquaredDistance, animalParticlesRead[closestParticleIndex].worldPos.xy);
}

[numthreads(1,1,1)]
void CSNewMeasureDistancesMainA (uint3 id : SV_DispatchThreadID)
{	
	int critterIndex = id.y;
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];
			
	float closestParticleIndex = 0;
	float minSquaredDistance = 100000;
		
	for(int i = 0; i < 32; i++) {
		
		int particleIndex = id.x * 32 + i;
		
		float4 sourceData = _CritterToZooplanktonDistancesTexRead[int2(i, critterIndex)];
		
		AnimalParticleData particleData = animalParticlesRead[particleIndex];

		if(sourceData.y < minSquaredDistance) {
			if(particleData.isActive > 0.5) {
				minSquaredDistance = sourceData.y;
				closestParticleIndex = sourceData.x;
			}				
		}
	}
		
	AnimalParticleData closestAnimalData = animalParticlesRead[closestParticleIndex];	
	
	closestParticlesDataCBuffer[critterIndex] = closestAnimalData;
	_ClosestZooplanktonCBuffer[id.y] = float4(closestParticleIndex, minSquaredDistance, closestAnimalData.worldPos.xy);
}


[numthreads(32,1,1)]
void CSMeasureInitCursorDistances (uint3 id : SV_DispatchThreadID)
{
	
	int particleIndex = id.x;	

	AnimalParticleData particleData = animalParticlesRead[particleIndex];
	
	float2 cursorWorldPos = float2(_MouseCoordX, _MouseCoordY);
	
	float2 particleToCursor = cursorWorldPos - particleData.worldPos.xy;

	float distanceSquared = particleToCursor.x * particleToCursor.x + particleToCursor.y * particleToCursor.y;
	
	cursorDistancesWrite[particleIndex] = float4(particleIndex, distanceSquared, particleData.worldPos.xy);			
}

[numthreads(1,1,1)]
void CSFetchParticleByID (uint3 id : SV_DispatchThreadID)
{
	AnimalParticleData selectedParticleData = animalParticlesRead[_SelectedParticleID];
	AnimalParticleData closestParticleData = animalParticlesRead[_ClosestParticleID];
	
	selectedAnimalParticleDataCBuffer[0] = selectedParticleData;
	selectedAnimalParticleDataCBuffer[1] = closestParticleData;
}

[numthreads(1,1,1)]
void CSEatSelectedAnimalParticles (uint3 id : SV_DispatchThreadID)
{	
	// Check distance to nearest particle
	int critterIndex = id.x;
	
	float4 data = _ClosestZooplanktonCBuffer[critterIndex];
	//float4 data = _CritterToZooplanktonDistancesRead[critterIndex];

	int particleIndex = (int)data.x;

	AnimalParticleData particleData = animalParticlesRead[particleIndex];
	
	animalParticlesWrite[particleIndex] = particleData;

	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	float eatenAmount = 0.0;

	float isAlive01 = saturate((critterSimData.embryoPercentage - 0.99) * 10000) * saturate(((1.0 - critterSimData.decayPercentage) - 0.99) * 10000);

	float distanceSquared = data.y;
	float mouthRadius = 1; // critterInitData.boundingBoxSize.x * critterSimData.growthPercentage;  // **** REMEMBER TO *0.5 EVENTUALLY FOR ACCURATE SIZE
	float particleRadius = particleData.radius;
	float combinedRadius = (mouthRadius + particleRadius * 0.5) * isAlive01 * critterSimData.consumeOn;
			
	if(distanceSquared < combinedRadius * combinedRadius) {	
		
		if(critterSimData.consumeOn > 0.5) {   // revisit
			eatenAmount = particleData.biomass; // * critterInitData.eatEfficiencyMeat + 10; //mouthRadius * mouthRadius * critterInitData.eatEfficiencyMeat * 0.167f; //particleData.nutrientContent;
			animalParticlesWrite[particleIndex].isActive = 0;
			animalParticlesWrite[particleIndex].isSwallowed = 1.0;
			animalParticlesWrite[particleIndex].critterIndex = critterIndex;		
			animalParticlesWrite[particleIndex].biomass = 0.0; // ?????   *****

		}	
	}
	

	animalParticlesEatAmountsCBuffer[id.x] = eatenAmount;
}

[numthreads(1024,1,1)]
void CSCopyAnimalParticlesBuffer (uint3 id : SV_DispatchThreadID)
{	
	AnimalParticleData particleData = animalParticlesRead[id.x];
	
	animalParticlesWrite[id.x] = particleData;
}

[numthreads(1,1,1)]
void CSMeasureTotalAnimalParticlesAmount (uint3 id : SV_DispatchThreadID)
{	
	AnimalParticleData copyData = animalParticlesRead[id.x];

	// Update this function to measure all required resource values, for example:
	// Total Oxygen used, total waste released, Total Algae Eaten, etc.?
	
	float totalBiomassAmount = 0.0;
	float totalOxygenUsed = 0.0;
	float totalWasteProduced = 0.0;
	float totalAlgaeConsumed = 0.0;
	
	for(int i = 0; i < 32; i++) {		
		int particleIndex = id.x * 32 + i;		
		AnimalParticleData particleData = animalParticlesRead[particleIndex];				
		totalBiomassAmount += particleData.biomass;
		totalOxygenUsed += particleData.oxygenUsed;
		totalWasteProduced += particleData.wasteProduced;
		totalAlgaeConsumed += particleData.algaeConsumed;
	}

	copyData.biomass = totalBiomassAmount;
	copyData.oxygenUsed = totalOxygenUsed;
	copyData.wasteProduced = totalWasteProduced;
	copyData.algaeConsumed = totalAlgaeConsumed;
		
	animalParticlesWrite[id.x] = copyData;
}

[numthreads(1024,1,1)]
void CSSimulateAnimalParticles (uint3 id : SV_DispatchThreadID)
{
	AnimalParticleData animalParticle = animalParticlesRead[id.x];
		
	if(animalParticle.isActive > 0.5) { // poor man's boolean  // Is being simulated / ready for respawn?
			
		float2 uv = animalParticle.worldPos.xy / _MapSize;
		
		// ** Pre-compute this in future:::: *****
		float4 terrainSampleCenter = altitudeRead.SampleLevel(_LinearClamp, uv, 1);
		float4 terrainSampleRight = altitudeRead.SampleLevel(_LinearClamp, uv + float2(0.005, 0), 1);
		float4 terrainSampleTop = altitudeRead.SampleLevel(_LinearClamp, uv + float2(0, 0.005), 1);

		float altitude = terrainSampleCenter.x;			
		
		float2 posOffset = float2(0,0);

		float bodyMass = animalParticle.biomass;  // multiplier on resource use?
		float wasteMass = 0;	
		float energy = animalParticle.energy;

		if(animalParticle.isDecaying > 0.5) { // ***** DEAD !!! ***** // Is Dead/Decaying
			// Some resource conversions still occur,
			// Still moved by water currents

			energy = 0;

			float decayEfficiency = 8; // *** should be inverse of growthEfficiency?
			float decayRate = 0.00015;
			float decayMass = decayRate * decayEfficiency;
						
			bodyMass -= decayMass;
			wasteMass += decayMass * 0.025;
			
			if(bodyMass <= 0.0) {  // fully decayed:
				animalParticlesWrite[id.x].isActive = 0.0;
				animalParticlesWrite[id.x].isDecaying = 0.0;
				bodyMass = 0;
			}
		}
		else {   // ***** ALIVE !!! *****
			
			
			// Normal simulation of Live animals:

			float energyDeathMask = saturate(energy * 100);
			if(animalParticle.age > 1.0 * energyDeathMask) {  // DEATH FROM OLD-AGE:
				animalParticlesWrite[id.x].isDecaying = 1.0;
				animalParticlesWrite[id.x].algaeConsumed = 0;
				animalParticlesWrite[id.x].extra0 = bodyMass;
			}
			else {   // ALIVE AND YOUNG:::
				const int numSamples = 4;
				int gapLength = 1024 / numSamples;
				
				for(int i = 0; i < numSamples; i++) {
					int neighborIndex = (id.x + round(_Time * 33) + i * gapLength) % 1024;
			
					AnimalParticleData neighborParticle = animalParticlesRead[neighborIndex];
					float aliveMask = (1.0 - neighborParticle.isDecaying) * neighborParticle.isActive;

					float2 neighborPos = neighborParticle.worldPos.xy;
					float2 dirToNeighbor = neighborPos - animalParticle.worldPos.xy;
					float distToNeighborSquared = dirToNeighbor.x * dirToNeighbor.x + dirToNeighbor.y * dirToNeighbor.y;		
			
					float distanceMask = 1.0 - saturate(distToNeighborSquared * _AlignMaskRange - _AlignMaskOffset);

					float2 targetFacingDir = lerp(animalParticle.velocity, neighborParticle.velocity, 0.33 * distanceMask);
					float facingDirSqrMag = targetFacingDir.x * targetFacingDir.x + targetFacingDir.y * targetFacingDir.y;
						
					if(facingDirSqrMag > 0.0) {
						targetFacingDir = normalize(targetFacingDir);
					}

					// Match orientation with nearest neighbor
					posOffset += targetFacingDir * _AlignSpeedMult * _MasterSwimSpeed / (float)numSamples * aliveMask * (animalParticle.genomeVector.x * 0.5 + 0.5);
		
					// move towards/away from nearest neighbor:			
					float attractDistanceMask = 1.0 - saturate(distToNeighborSquared * _AttractMaskMaxDistance - _AttractMaskOffset);
					float2 attractVel = float2(saturate(dirToNeighbor.x), saturate(dirToNeighbor.y)) * attractDistanceMask;
					posOffset += attractVel * _AttractMag * _MasterSwimSpeed * aliveMask * (animalParticle.genomeVector.y * 0.5 + 0.5);
				}
		
				//random noisy movement:		
				float noiseFreq = (_SwimNoiseFreqMin + _SwimNoiseFreqRange * ((float)id.x / 1024));
				float noiseOnOff = saturate(rand(float2(id.x, _Time * _SwimNoiseOnOffFreq)));
				float2 noiseVel = float2(rand(float2(id.x, _Time * noiseFreq)), rand(float2(_Time * noiseFreq * 1.347, id.x % 32))) * 2.0 - 1.0;  // get into -1 to 1 range		
				posOffset += noiseVel * _SwimNoiseMag * _MasterSwimSpeed * noiseOnOff * (animalParticle.genomeVector.z * 0.5 + 0.5);
			
			// *********************************************
				
				float isUnderwater = 1.0 - saturate((altitude - _GlobalWaterLevel) * 10);

				float4 resourceGridSample = _ResourceGridRead.SampleLevel(_PointClamp, uv, 1);

				float isAliveMask = saturate(1.0 - animalParticle.isDecaying);
				float maxAlgaeConsumptionRate = 0.00026;  // one-thousandth of biomass per tick = bodyweight consumed per 1000 ticks
				float algaeConsumptionMask = saturate(resourceGridSample.w * isAliveMask);  // - 0.01);  //    1; // saturate(_GlobalAlgaeLevel * 0.01);   //  if global levels are too low it reduces consumption?

				float maxOxygenConsumptionRate = 0.01; // relative to biomass?
				float oxygenConsumptionMask = 1; //saturate(_GlobalOxygenLevel * 0.01);

				float algaeConsumed = bodyMass * maxAlgaeConsumptionRate * algaeConsumptionMask * isUnderwater;
				float oxygenUsed = bodyMass * maxOxygenConsumptionRate * oxygenConsumptionMask;

				float energyDelta = algaeConsumed - (bodyMass * 0.000016 + 0.0000000065);
				energy += (energyDelta * 20000);
				energy -= (1.0 - isUnderwater) * 0.0001;
				//float dessicationLostMass = saturate((terrainSampleCenter.x - _GlobalWaterLevel) * 25) * 0.001;
		
				float growthEfficiency = 45; //
				float wasteEfficiency = 2.75;
				float growthMass = algaeConsumed * growthEfficiency * oxygenConsumptionMask; // Also limited by OXYGEN!!!
					// Maximum growth needs an explicit cap? or should it simply be determined by max algaeConsumption Rate + maxAge?
				wasteMass += algaeConsumed * wasteEfficiency;		
					// (The rest of energy is lost as heat?)
				

				bodyMass += growthMass;

				animalParticlesWrite[id.x].algaeConsumed = algaeConsumed;
				animalParticlesWrite[id.x].oxygenUsed = oxygenUsed;
				animalParticlesWrite[id.x].energy = energy;
			}		
		}
		 
		// WATER CURRENTS *********  (happens regardless of dead/alive)
		float2 fluidVel = velocityRead.SampleLevel(_LinearRepeat, uv, 2).xy;  // water velocity
		float fluidSpeedMult = 0.0167;
		posOffset += fluidVel * fluidSpeedMult * _MapSize;  // carried by water

		// Shoreline "Collision"	
		float effectiveAltitudeCenter = max(terrainSampleCenter.x, (1.0 - terrainSampleCenter.w));  // *** Out-Of-Bounds areas act like they have altitude = 1.0 ***
		float effectiveAltitudeRight = max(terrainSampleRight.x, (1.0 - terrainSampleRight.w));
		float effectiveAltitudeTop = max(terrainSampleTop.x, (1.0 - terrainSampleTop.w));
		float2 slope = float2(effectiveAltitudeRight - effectiveAltitudeCenter, effectiveAltitudeTop - effectiveAltitudeCenter);
		float aboveWaterMask = saturate((altitude - _GlobalWaterLevel) * _ShoreCollisionDistSlope);		
		float2 landCollisionVel = -slope * aboveWaterMask * _ShoreCollisionMag;
		posOffset += landCollisionVel * _MasterSwimSpeed;	// Independent of Map size?!?!?
		
		
		// **** UPDATE POSITION !!!! ****
		float2 newWorldPos = animalParticle.worldPos.xy + posOffset;
		newWorldPos.x = min(max(newWorldPos.x, 0), _MapSize);   // CAP BOUNDARIES
		newWorldPos.y = min(max(newWorldPos.y, 0), _MapSize);   // CAP BOUNDARIES
		
		animalParticlesWrite[id.x].velocity = newWorldPos - animalParticlesWrite[id.x].worldPos.xy;
		animalParticlesWrite[id.x].worldPos.xy = newWorldPos;
		
		animalParticlesWrite[id.x].biomass = bodyMass;

		float4 spiritBrushTex = _SpawnDensityMap.SampleLevel(_LinearClamp, uv, 0);  // brush mask
		float rightClickMask01 = saturate(_SpiritBrushPosNeg * -1);
		// AGING:
		animalParticlesWrite[id.x].age = animalParticle.age + 0.00005 * _AgingMult + spiritBrushTex.x * rightClickMask01 * 1 * _IsBrushing;

		// Resource Conversions:::::		
		animalParticlesWrite[id.x].wasteProduced = wasteMass;	// Combined Poop & Decomposing	
		
	}
	else {  // INACTIVE::: // Ready For Respawn
		
		animalParticlesWrite[id.x].biomass = 0;
		animalParticlesWrite[id.x].oxygenUsed = 0;
		animalParticlesWrite[id.x].wasteProduced = 0;
		animalParticlesWrite[id.x].algaeConsumed = 0;

		// &&&& RESPAWN!!! &&&& ==========================================================================================================
		float isRightClick = saturate(_SpiritBrushPosNeg * -1.0) * _IsBrushing;
		float isLeftClick = saturate(_SpiritBrushPosNeg) * _IsBrushing;
		//if(_IsBrushing > 0.5) {		
		
		if(id.x % 2 > 0.5) { //_IsBrushing * isLeftClick > 0.5) {	 // player brushing this// Player-generated:
			
			for(int i = 0; i < 4; i++) {
				float rand01 = rand(float2(_Time * 135.79 + (float)animalParticlesRead[id.x].index * 30.17896 + i, _Time * 28.463 - i));
			
				float randX = rand(float2((float)id.x - i, _Time + i));
				float randY = rand(float2(randX * 62.39 + i + _Time, (float)id.x - i));
			
				float2 spawnUV = float2(randX, randY); 						
				float4 spawnAltitudeSample = altitudeRead.SampleLevel(_LinearClamp, spawnUV, 0);			
				//float distToOrigin = length(_SpawnPos.xy - (spawnUV * _MapSize));
			
				//  SPIRIT BRUSH MASK:
				//float4 brushMaskTex = _SpawnDensityMap.SampleLevel(_LinearClamp, spawnUV, 0);
				//float rightClickMask01 = saturate(_SpiritBrushPosNeg * -1);  
				//float brushMask = saturate(brushMaskTex.x * 1.33);

				//if(brushMask * (1.0 - rightClickMask01) > 0.5) {  
					if(spawnAltitudeSample.x < _GlobalWaterLevel) {  // in water only? // for now...
						float2 worldPos = float2(spawnUV.x * _MapSize, spawnUV.y * _MapSize);
						animalParticlesWrite[id.x].worldPos.xy = worldPos;
						
						float randRadius = rand(float2(randX * 10, randY * -3.37)) * (_MaxParticleSize - _MinParticleSize) + _MinParticleSize;					
			
						AnimalParticleData representativeParticle = _RepresentativeGenomeCBuffer[0];

						// StartSize?
						float startingMass = 0.0075;
						float startingRadius = sqrt(startingMass);
						animalParticlesWrite[id.x].radius = startingRadius;  // Obsolete? 
						animalParticlesWrite[id.x].biomass = startingMass;         //randRadius * randRadius * 3.141592 * _ParticleNutrientDensity;
						animalParticlesWrite[id.x].energy = 0.5;
						animalParticlesWrite[id.x].isActive = 1.0;
						animalParticlesWrite[id.x].isDecaying = 0.0; // might be obsolete
						animalParticlesWrite[id.x].isSwallowed = 0.0;  // 
						animalParticlesWrite[id.x].digestedAmount = 0.0; // to become decay?
						animalParticlesWrite[id.x].age = 0; //rand(float2(rand01 * 70.158, randX * 13.37));  // 0-1, death at 2
						animalParticlesWrite[id.x].color = lerp(representativeParticle.color, float4(rand01,randX,randY,1), 0.05);

						float randA = rand(float2((float)id.x - randY, _Time * 6.14 * rand01));
						float randB = rand(float2(randX * 62.39 + _Time, randY));
						float randC = rand(float2((float)id.x, randX * -62.39 - _Time));	
						//float randD = rand(float2(rand01, _Time * 0.9174 + 90.13));

						animalParticlesWrite[id.x].genomeVector.xyz = lerp(representativeParticle.genomeVector.xyz, float3(randA, randB, randC), 0.33);
						animalParticlesWrite[id.x].genomeVector.w = representativeParticle.genomeVector.w + 1.0;

						animalParticlesWrite[id.x].extra0 = startingMass;

						break;
					}	
					else {
						
					}
				//}
			}
		}
		else {  // Player not brushing! -- use standard auto-reproduction!
			
			
			float rand01 = rand(float2(_Time * 135.79 + (float)id.x * 30.17896, _Time * 28.463));
			float randX = rand(float2((float)id.x, _Time));
			float randY = rand(float2(randX * 62.39 + _Time, (float)id.x));
			float randZ = rand(float2((float)id.x, randY * -62.39 - _Time));	
			
			int parentIndex = (id.x + round(_Time * 0.25) + 256) % 1024;
			AnimalParticleData parentParticle = animalParticlesRead[parentIndex];
			
			
			float aliveMask = (1.0 - parentParticle.isDecaying) * parentParticle.isActive;
			float fertilityMask = saturate((parentParticle.energy - 1.0) * 3) * aliveMask;
			
			float2 parentPos = parentParticle.worldPos.xy;

			float2 spawnUV = (parentPos + (float2(randX, randY) - 0.5) * 0.2) / _MapSize; 						
			float4 spawnAltitudeSample = altitudeRead.SampleLevel(_LinearClamp, spawnUV, 0);
			float activeGridCellMask = saturate((spawnAltitudeSample.w - 0.04) * 100);
							
			if(spawnAltitudeSample.x < _GlobalWaterLevel * fertilityMask * activeGridCellMask && rand01 > 0.9) {  // in water only? // for now...
				float2 worldPos = float2(spawnUV.x * _MapSize, spawnUV.y * _MapSize);
				animalParticlesWrite[id.x].worldPos.xy = worldPos;
				
				float randRadius = rand(float2(randX * 10, randY * -3.37)) * (_MaxParticleSize - _MinParticleSize) + _MinParticleSize;					
			
				// StartSize?
				float startingMass = 0.01;
				float startingRadius = sqrt(startingMass);
				animalParticlesWrite[id.x].radius = startingRadius;  // Obsolete? 
				animalParticlesWrite[id.x].biomass = startingMass;         //randRadius * randRadius * 3.141592 * _ParticleNutrientDensity;
				animalParticlesWrite[id.x].energy = 0.5;
				animalParticlesWrite[id.x].isActive = 1.0;
				animalParticlesWrite[id.x].isDecaying = 0.0; // might be obsolete
				animalParticlesWrite[id.x].isSwallowed = 0.0;  // 
				animalParticlesWrite[id.x].digestedAmount = 0.0; // to become decay?
				animalParticlesWrite[id.x].age = 0; //rand(float2(rand01 * 70.158, randX * 13.37));  // 0-1, death at 2
				animalParticlesWrite[id.x].color = lerp(parentParticle.color, float4(rand01,randX,randY,1), 0.125);

				float randA = rand(float2((float)id.x - randY * 1009.431, _Time * 46.14 * rand01));
				float randB = rand(float2(randX * 62.39 + _Time * -2398, randY));
				float randC = rand(float2((float)id.x, randX * -62.39 - _Time * -14925));	
				float randD = rand(float2(rand01, _Time * 7330.9174 + 900.13));

				float4 vec = lerp(parentParticle.genomeVector, float4(randA, randB, randC, randD), 0.05);
				vec.w = parentParticle.genomeVector.w + 1.0;  // generation
				animalParticlesWrite[id.x].genomeVector = vec;
				animalParticlesWrite[id.x].extra0 = 0;  // biomass size at time of death?
			}
		}
	}
}



/*[numthreads(1024,1,1)]
void CSMeasureInitCritterDistances (uint3 id : SV_DispatchThreadID)
{	
	int particleIndex = id.x;
	int critterIndex = id.y;

	AnimalParticleData particleData = animalParticlesRead[particleIndex];
	CritterInitData critterInitData = critterInitDataCBuffer[critterIndex];
	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];

	float mouthRadius = critterInitData.boundingBoxSize.x * critterSimData.growthPercentage; // **** REMEMBER TO *0.5 EVENTUALLY FOR ACCURATE SIZE
	float2 mouthCenterPos = critterSimData.heading * critterInitData.boundingBoxSize.y * 0.5 * critterSimData.growthPercentage;

	float2 particleToCritter = critterSimData.worldPos.xy + mouthCenterPos * 1.0 - particleData.worldPos.xy;

	float distanceSquared = particleToCritter.x * particleToCritter.x + particleToCritter.y * particleToCritter.y;
	
	animalParticlesNearestCrittersRT[int2(particleIndex, critterIndex)] = float4(particleData.index, distanceSquared, particleData.worldPos.xy);
		
}

[numthreads(1,1,1)]
void CSReduceCritterDistances32 (uint3 id : SV_DispatchThreadID)
{	
	
	int critterIndex = id.y;

	CritterSimData critterSimData = critterSimDataCBuffer[critterIndex];
			
	float closestParticleIndex = 0;
	float minSquaredDistance = 50000;
		
	for(int i = 0; i < 32; i++) {
		
		int particleIndex = id.x * 32 + i;
		
		float4 sourceData = critterDistancesRead[int2(particleIndex, critterIndex)];
		
		AnimalParticleData particleData = animalParticlesRead[particleIndex];

		if(sourceData.y < minSquaredDistance) {
			if(particleData.isActive > 0.5) {
				minSquaredDistance = sourceData.y;
				closestParticleIndex = sourceData.x;
			}				
		}
	}
		
	AnimalParticleData closestAnimalData = animalParticlesRead[closestParticleIndex];	
		
	critterDistancesWrite[int2(id.x, critterIndex)] = float4(closestParticleIndex, minSquaredDistance, 1.0, 1.0);
	closestParticlesDataCBuffer[critterIndex] = closestAnimalData; // assuming there's only 1 thread at end
}
*/
